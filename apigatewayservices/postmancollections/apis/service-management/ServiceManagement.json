{
	"info": {
		"_postman_id": "fcf030a9-305c-4dfd-ba9e-ae7ca372ec25",
		"name": "Service Management",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "APIs",
			"item": [
				{
					"name": "Versions",
					"item": [
						{
							"name": "Get Versions of API by ID",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/apis/:apiId/versions",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"apis",
										":apiId",
										"versions"
									],
									"variable": [
										{
											"key": "apiId",
											"value": "2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0",
											"description": "(Required) API Id for the API to retrieve the versions"
										}
									]
								},
								"description": "Retrieve all the versions of the API"
							},
							"response": [
								{
									"name": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/apis/:apiId/versions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions"
											],
											"variable": [
												{
													"key": "apiId"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "This status code indicates that the apiId specified is not found in the API Gateway",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/apis/:apiId/versions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions"
											],
											"variable": [
												{
													"key": "apiId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns the API versions",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/apis/:apiId/versions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions"
											],
											"variable": [
												{
													"key": "apiId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"{\\r\\n    \\\"apiResponse\\\": {\\r\\n        \\\"api\\\": {\\r\\n            \\\"apiDefinition\\\": {\\r\\n                \\\"type\\\": \\\"rest\\\",\\r\\n                \\\"info\\\": {\\r\\n                    \\\"description\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n                    \\\"version\\\": \\\"1.0\\\",\\r\\n                    \\\"title\\\": \\\"ChuckNorrisAPI\\\"\\r\\n                },\\r\\n                \\\"host\\\": \\\"api.chucknorris.io\\\",\\r\\n                \\\"basePath\\\": \\\"/jokes\\\",\\r\\n                \\\"schemes\\\": [\\r\\n                    \\\"https\\\"\\r\\n                ],\\r\\n                \\\"security\\\": [],\\r\\n                \\\"paths\\\": {\\r\\n                    \\\"/random\\\": {\\r\\n                        \\\"get\\\": {\\r\\n                            \\\"summary\\\": \\\"GET\\\",\\r\\n                            \\\"description\\\": \\\"\\\",\\r\\n                            \\\"operationId\\\": \\\"GET\\\",\\r\\n                            \\\"produces\\\": [\\r\\n                                \\\"application/json\\\"\\r\\n                            ],\\r\\n                            \\\"responses\\\": {},\\r\\n                            \\\"enabled\\\": true\\r\\n                        },\\r\\n                        \\\"enabled\\\": true\\r\\n                    }\\r\\n                },\\r\\n                \\\"securityDefinitions\\\": {},\\r\\n                \\\"definitions\\\": {},\\r\\n                \\\"baseUriParameters\\\": [],\\r\\n                \\\"externalDocs\\\": [],\\r\\n                \\\"servers\\\": [\\r\\n                    {\\r\\n                        \\\"url\\\": \\\"https://api.chucknorris.io/jokes\\\"\\r\\n                    }\\r\\n                ],\\r\\n                \\\"components\\\": {\\r\\n                    \\\"schemas\\\": {}\\r\\n                }\\r\\n            },\\r\\n            \\\"nativeEndpoint\\\": [\\r\\n                {\\r\\n                    \\\"passSecurityHeaders\\\": true,\\r\\n                    \\\"uri\\\": \\\"https://api.chucknorris.io/jokes\\\",\\r\\n                    \\\"connectionTimeoutDuration\\\": 0,\\r\\n                    \\\"alias\\\": false\\r\\n                }\\r\\n            ],\\r\\n            \\\"apiName\\\": \\\"ChuckNorris\\\",\\r\\n            \\\"apiVersion\\\": \\\"1.0\\\",\\r\\n            \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n            \\\"maturityState\\\": \\\"Beta\\\",\\r\\n            \\\"isActive\\\": false,\\r\\n            \\\"type\\\": \\\"REST\\\",\\r\\n            \\\"owner\\\": \\\"Administrator\\\",\\r\\n            \\\"policies\\\": [\\r\\n                \\\"08afbfa9-78e1-4c23-bb19-c0012464047e\\\"\\r\\n            ],\\r\\n            \\\"scopes\\\": [],\\r\\n            \\\"publishedPortals\\\": [],\\r\\n            \\\"creationDate\\\": \\\"2018-09-03 11:56:21 GMT\\\",\\r\\n            \\\"systemVersion\\\": 1,\\r\\n            \\\"id\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n        },\\r\\n        \\\"responseStatus\\\": \\\"SUCCESS\\\",\\r\\n        \\\"versions\\\": [\\r\\n            {\\r\\n                \\\"versionNumber\\\": \\\"1.0\\\",\\r\\n                \\\"apiId\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n            }\\r\\n        ]\\r\\n    }\\r\\n}\""
								}
							]
						},
						{
							"name": "Create Version",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"newApiVersion\": \"2.0\",\n    \"retainApplications\": \"true\"\n}"
								},
								"url": {
									"raw": "{{baseURL}}/apis/:apiId/versions",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"apis",
										":apiId",
										"versions"
									],
									"variable": [
										{
											"description": "(Required) API Id for the API to be versioned",
											"key": "apiId",
											"value": "2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0"
										}
									]
								},
								"description": "Create a new version of an API and retain applications if required"
							},
							"response": [
								{
									"name": "Return the newly created version of the API",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"newApiVersion\": \"<string>\",\n    \"retainApplications\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/apis/:apiId/versions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions"
											],
											"variable": [
												{
													"key": "apiId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"{\\r\\n    \\\"apiResponse\\\": {\\r\\n        \\\"api\\\": {\\r\\n            \\\"apiDefinition\\\": {\\r\\n                \\\"type\\\": \\\"rest\\\",\\r\\n                \\\"info\\\": {\\r\\n                    \\\"description\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n                    \\\"version\\\": \\\"1.0\\\",\\r\\n                    \\\"title\\\": \\\"ChuckNorrisAPI\\\"\\r\\n                },\\r\\n                \\\"host\\\": \\\"api.chucknorris.io\\\",\\r\\n                \\\"basePath\\\": \\\"/jokes\\\",\\r\\n                \\\"schemes\\\": [\\r\\n                    \\\"https\\\"\\r\\n                ],\\r\\n                \\\"security\\\": [],\\r\\n                \\\"paths\\\": {\\r\\n                    \\\"/random\\\": {\\r\\n                        \\\"get\\\": {\\r\\n                            \\\"summary\\\": \\\"GET\\\",\\r\\n                            \\\"description\\\": \\\"\\\",\\r\\n                            \\\"operationId\\\": \\\"GET\\\",\\r\\n                            \\\"produces\\\": [\\r\\n                                \\\"application/json\\\"\\r\\n                            ],\\r\\n                            \\\"responses\\\": {},\\r\\n                            \\\"enabled\\\": true\\r\\n                        },\\r\\n                        \\\"enabled\\\": true\\r\\n                    }\\r\\n                },\\r\\n                \\\"securityDefinitions\\\": {},\\r\\n                \\\"definitions\\\": {},\\r\\n                \\\"baseUriParameters\\\": [],\\r\\n                \\\"externalDocs\\\": [],\\r\\n                \\\"servers\\\": [\\r\\n                    {\\r\\n                        \\\"url\\\": \\\"https://api.chucknorris.io/jokes\\\"\\r\\n                    }\\r\\n                ],\\r\\n                \\\"components\\\": {\\r\\n                    \\\"schemas\\\": {}\\r\\n                }\\r\\n            },\\r\\n            \\\"nativeEndpoint\\\": [\\r\\n                {\\r\\n                    \\\"passSecurityHeaders\\\": true,\\r\\n                    \\\"uri\\\": \\\"https://api.chucknorris.io/jokes\\\",\\r\\n                    \\\"connectionTimeoutDuration\\\": 0,\\r\\n                    \\\"alias\\\": false\\r\\n                }\\r\\n            ],\\r\\n            \\\"apiName\\\": \\\"ChuckNorris\\\",\\r\\n            \\\"apiVersion\\\": \\\"1.0\\\",\\r\\n            \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n            \\\"maturityState\\\": \\\"Beta\\\",\\r\\n            \\\"isActive\\\": false,\\r\\n            \\\"type\\\": \\\"REST\\\",\\r\\n            \\\"owner\\\": \\\"Administrator\\\",\\r\\n            \\\"policies\\\": [\\r\\n                \\\"08afbfa9-78e1-4c23-bb19-c0012464047e\\\"\\r\\n            ],\\r\\n            \\\"scopes\\\": [],\\r\\n            \\\"publishedPortals\\\": [],\\r\\n            \\\"creationDate\\\": \\\"2018-09-03 11:56:21 GMT\\\",\\r\\n            \\\"systemVersion\\\": 1,\\r\\n            \\\"id\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n        },\\r\\n        \\\"responseStatus\\\": \\\"SUCCESS\\\",\\r\\n        \\\"versions\\\": [\\r\\n            {\\r\\n                \\\"versionNumber\\\": \\\"1.0\\\",\\r\\n                \\\"apiId\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n            }\\r\\n        ]\\r\\n    }\\r\\n}\""
								},
								{
									"name": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"newApiVersion\": \"<string>\",\n    \"retainApplications\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/apis/:apiId/versions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions"
											],
											"variable": [
												{
													"key": "apiId"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"newApiVersion\": \"<string>\",\n    \"retainApplications\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/apis/:apiId/versions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions"
											],
											"variable": [
												{
													"key": "apiId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "This status code returns when the specified api is not the latest version or if the newApiVersion is empty",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"newApiVersion\": \"<string>\",\n    \"retainApplications\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/apis/:apiId/versions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions"
											],
											"variable": [
												{
													"key": "apiId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9caeabbd-f2af-45fe-b2ab-6a2385d8d5e6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7a0bcd00-2a59-40f9-808f-22d4d4ec8a5a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Mocking",
					"item": [
						{
							"name": "Enable API Mocking",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/apis/:apiId/mock/enable?retainDefaultMockResponses=false",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"apis",
										":apiId",
										"mock",
										"enable"
									],
									"query": [
										{
											"key": "retainDefaultMockResponses",
											"value": "false",
											"description": "Flag to retain generated mocked responses. When this is set to true, default mocked responses will be retained. If it's set to false, new default mocked responses will be generated using the examples, schema in the API"
										}
									],
									"variable": [
										{
											"description": "(Required) API Id for the API to be activated",
											"key": "apiId",
											"value": "3c575e49-73d5-4ae8-a3a5-552544e5a4a0"
										}
									]
								},
								"description": "In API Gateway, you can mock an API implementation. API Gateway lets you mock an API by simulating the native service. API Mocking is useful feature in API first approach, where in the provider may choose to expose the mocked API to the consumers when the actual API doesn't exist or isn't complete. \n In API Gateway, when you enable mocking for an API, a default mock response is created for each combination of resource, operation, status code and content-type based on the example and schema set in the API definition. As an API Provider, you can add or modify the default mock responses.\n\nYou can specify conditions at the operation level and configure IS services at the API level for a mocked API in the update API operation. At runtime, when the mocked API is invoked instead of calling the native service, API Gateway returns the mocked response to the consumer based on the below priorities:\n1. If any of the conditions for the invoked operation satisfies, API Gateway returns the associated mocked response.\n2. If no condition is specified or none of the condition for the invoked operation is satisfied, then API Gateway will return \na. the response from an IS service, if an IS service is configured b. default mocked response, if no IS services are configured"
							},
							"response": [
								{
									"name": "Returns the API object after successfully enabling mocking of an API",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/apis/:apiId/mock/enable?retainDefaultMockResponses=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"apis",
												":apiId",
												"mock",
												"enable"
											],
											"query": [
												{
													"key": "retainDefaultMockResponses",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "apiId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"{\\r\\n    \\\"apiResponse\\\": {\\r\\n        \\\"api\\\": {\\r\\n            \\\"apiDefinition\\\": {\\r\\n                \\\"type\\\": \\\"rest\\\",\\r\\n                \\\"info\\\": {\\r\\n                    \\\"description\\\": \\\"API to demonstrate mocking functionality in international developers day\\\",\\r\\n                    \\\"version\\\": \\\"v1\\\",\\r\\n                    \\\"title\\\": \\\"API_MOCKING\\\"\\r\\n                },\\r\\n                \\\"host\\\": \\\"localhost\\\",\\r\\n                \\\"schemes\\\": [\\r\\n                    \\\"http\\\"\\r\\n                ],\\r\\n                \\\"consumes\\\": [\\r\\n                    \\\"application/json\\\"\\r\\n                ],\\r\\n                \\\"security\\\": [],\\r\\n                \\\"paths\\\": {\\r\\n                    \\\"/conditionBasedMockedResponse\\\": {\\r\\n                        \\\"post\\\": {\\r\\n                            \\\"summary\\\": \\\"Configure condition and mocked response\\\",\\r\\n                            \\\"operationId\\\": \\\"conditionBasedMockedResponse\\\",\\r\\n                            \\\"produces\\\": [\\r\\n                                \\\"text/plain\\\"\\r\\n                            ],\\r\\n                            \\\"responses\\\": {\\r\\n                                \\\"200\\\": {\\r\\n                                    \\\"description\\\": \\\"200 response\\\",\\r\\n                                    \\\"content\\\": {\\r\\n                                        \\\"text/plain\\\": {\\r\\n                                            \\\"example\\\": \\\"No condition evaluates to true. \\\\nSo API-Gateway sent this default response.\\\"\\r\\n                                        }\\r\\n                                    }\\r\\n                                }\\r\\n                            },\\r\\n                            \\\"mockedResponses\\\": {\\r\\n                                \\\"200\\\": {\\r\\n                                    \\\"responseBody\\\": {\\r\\n                                        \\\"text/plain\\\": \\\"No condition evaluates to true. \\\\nSo API-Gateway sent this default response.\\\"\\r\\n                                    }\\r\\n                                }\\r\\n                            },\\r\\n                            \\\"enabled\\\": true\\r\\n                        },\\r\\n                        \\\"parameters\\\": [],\\r\\n                        \\\"displayName\\\": \\\"/conditionBasedMockedResponse\\\",\\r\\n                        \\\"enabled\\\": true\\r\\n                    },\\r\\n                    \\\"/customESBMockedResponse\\\": {\\r\\n                        \\\"post\\\": {\\r\\n                            \\\"summary\\\": \\\"Configure custom ESB mocked response\\\",\\r\\n                            \\\"operationId\\\": \\\"customESBMockedResponse\\\",\\r\\n                            \\\"produces\\\": [\\r\\n                                \\\"application/json\\\"\\r\\n                            ],\\r\\n                            \\\"responses\\\": {\\r\\n                                \\\"200\\\": {\\r\\n                                    \\\"description\\\": \\\"200 response\\\"\\r\\n                                }\\r\\n                            },\\r\\n                            \\\"mockedResponses\\\": {\\r\\n                                \\\"200\\\": {\\r\\n                                    \\\"responseBody\\\": {\\r\\n                                        \\\"application/json\\\": \\\"\\\"\\r\\n                                    }\\r\\n                                }\\r\\n                            },\\r\\n                            \\\"enabled\\\": true\\r\\n                        },\\r\\n                        \\\"parameters\\\": [],\\r\\n                        \\\"displayName\\\": \\\"/customESBMockedResponse\\\",\\r\\n                        \\\"enabled\\\": true\\r\\n                    },\\r\\n                    \\\"/dynamicMockedResponse\\\": {\\r\\n                        \\\"post\\\": {\\r\\n                            \\\"summary\\\": \\\"Dynamic mocked response set\\\",\\r\\n                            \\\"operationId\\\": \\\"dynamicMockedResponse\\\",\\r\\n                            \\\"produces\\\": [\\r\\n                                \\\"application/json\\\"\\r\\n                            ],\\r\\n                            \\\"responses\\\": {\\r\\n                                \\\"200\\\": {\\r\\n                                    \\\"description\\\": \\\"200 response\\\"\\r\\n                                }\\r\\n                            },\\r\\n                            \\\"mockedResponses\\\": {\\r\\n                                \\\"200\\\": {\\r\\n                                    \\\"responseBody\\\": {\\r\\n                                        \\\"application/json\\\": \\\"\\\"\\r\\n                                    }\\r\\n                                }\\r\\n                            },\\r\\n                            \\\"enabled\\\": true\\r\\n                        },\\r\\n                        \\\"parameters\\\": [],\\r\\n                        \\\"displayName\\\": \\\"/dynamicMockedResponse\\\",\\r\\n                        \\\"enabled\\\": true\\r\\n                    },\\r\\n                    \\\"/staticMockedResponse\\\": {\\r\\n                        \\\"post\\\": {\\r\\n                            \\\"summary\\\": \\\"Default mocked response from example\\\",\\r\\n                            \\\"operationId\\\": \\\"generateFromExample\\\",\\r\\n                            \\\"produces\\\": [\\r\\n                                \\\"application/json\\\",\\r\\n                                \\\"application/xml\\\"\\r\\n                            ],\\r\\n                            \\\"responses\\\": {\\r\\n                                \\\"200\\\": {\\r\\n                                    \\\"description\\\": \\\"200 response generated from example\\\",\\r\\n                                    \\\"content\\\": {\\r\\n                                        \\\"application/json\\\": {\\r\\n                                            \\\"example\\\": \\\"{\\\\\\\"resource\\\\\\\" : \\\\\\\"/generateFromExample\\\\\\\",\\\\\\\"description\\\\\\\" : \\\\\\\"Default mocked response from example for status code 200\\\\\\\"}\\\"\\r\\n                                        },\\r\\n                                        \\\"application/xml\\\": {\\r\\n                                            \\\"example\\\": \\\"<root><resource>/generateFromExample</resource><description>Default mocked response from example for status code 200</description></root>\\\"\\r\\n                                        }\\r\\n                                    }\\r\\n                                },\\r\\n                                \\\"201\\\": {\\r\\n                                    \\\"description\\\": \\\"201 response generated from schema\\\",\\r\\n                                    \\\"content\\\": {\\r\\n                                        \\\"application/json\\\": {\\r\\n                                            \\\"schema\\\": {\\r\\n                                                \\\"$ref\\\": \\\"#/components/schemas/Pet\\\"\\r\\n                                            }\\r\\n                                        },\\r\\n                                        \\\"application/xml\\\": {\\r\\n                                            \\\"schema\\\": {\\r\\n                                                \\\"$ref\\\": \\\"#/components/schemas/Pet\\\"\\r\\n                                            }\\r\\n                                        }\\r\\n                                    }\\r\\n                                }\\r\\n                            },\\r\\n                            \\\"mockedResponses\\\": {\\r\\n                                \\\"200\\\": {\\r\\n                                    \\\"responseBody\\\": {\\r\\n                                        \\\"application/json\\\": \\\"{\\\\\\\"resource\\\\\\\" : \\\\\\\"/generateFromExample\\\\\\\",\\\\\\\"description\\\\\\\" : \\\\\\\"Default mocked response from example for status code 200\\\\\\\"}\\\",\\r\\n                                        \\\"application/xml\\\": \\\"<root><resource>/generateFromExample</resource><description>Default mocked response from example for status code 200</description></root>\\\"\\r\\n                                    }\\r\\n                                },\\r\\n                                \\\"201\\\": {\\r\\n                                    \\\"responseBody\\\": {\\r\\n                                        \\\"application/json\\\": \\\"{\\\\\\\"birthday\\\\\\\":2059397944,\\\\\\\"name\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\r\\n                                        \\\"application/xml\\\": \\\"<birthday>921604684</birthday><name/>\\\"\\r\\n                                    }\\r\\n                                }\\r\\n                            },\\r\\n                            \\\"enabled\\\": true\\r\\n                        },\\r\\n                        \\\"parameters\\\": [],\\r\\n                        \\\"displayName\\\": \\\"/staticMockedResponse\\\",\\r\\n                        \\\"enabled\\\": true\\r\\n                    }\\r\\n                },\\r\\n                \\\"securityDefinitions\\\": {},\\r\\n                \\\"definitions\\\": {},\\r\\n                \\\"baseUriParameters\\\": [],\\r\\n                \\\"externalDocs\\\": [],\\r\\n                \\\"servers\\\": [\\r\\n                    {\\r\\n                        \\\"url\\\": \\\"http://localhost\\\"\\r\\n                    }\\r\\n                ],\\r\\n                \\\"components\\\": {\\r\\n                    \\\"schemas\\\": {\\r\\n                        \\\"Pet\\\": {\\r\\n                            \\\"required\\\": [\\r\\n                                \\\"name\\\"\\r\\n                            ],\\r\\n                            \\\"type\\\": \\\"object\\\",\\r\\n                            \\\"properties\\\": {\\r\\n                                \\\"birthday\\\": {\\r\\n                                    \\\"type\\\": \\\"integer\\\",\\r\\n                                    \\\"format\\\": \\\"int32\\\"\\r\\n                                },\\r\\n                                \\\"name\\\": {\\r\\n                                    \\\"type\\\": \\\"string\\\"\\r\\n                                }\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            },\\r\\n            \\\"nativeEndpoint\\\": [\\r\\n                {\\r\\n                    \\\"passSecurityHeaders\\\": true,\\r\\n                    \\\"uri\\\": \\\"http://localhost\\\",\\r\\n                    \\\"connectionTimeoutDuration\\\": 0,\\r\\n                    \\\"alias\\\": false\\r\\n                }\\r\\n            ],\\r\\n            \\\"apiName\\\": \\\"APIMocking\\\",\\r\\n            \\\"apiVersion\\\": \\\"v1\\\",\\r\\n            \\\"apiDescription\\\": \\\"API to demonstrate mocking functionality in international developers day\\\",\\r\\n            \\\"maturityState\\\": \\\"Beta\\\",\\r\\n            \\\"isActive\\\": false,\\r\\n            \\\"type\\\": \\\"REST\\\",\\r\\n            \\\"owner\\\": \\\"Administrator\\\",\\r\\n            \\\"policies\\\": [\\r\\n                \\\"19773e29-2838-4efc-aa04-793b48f4d22b\\\"\\r\\n            ],\\r\\n            \\\"scopes\\\": [],\\r\\n            \\\"publishedPortals\\\": [],\\r\\n            \\\"creationDate\\\": \\\"2018-11-01 13:44:58 GMT\\\",\\r\\n            \\\"systemVersion\\\": 1,\\r\\n            \\\"mockService\\\": {\\r\\n                \\\"enableMock\\\": true\\r\\n            },\\r\\n            \\\"id\\\": \\\"afd8eb5e-bba8-447b-8e28-76aac23ba074\\\"\\r\\n        },\\r\\n        \\\"responseStatus\\\": \\\"SUCCESS\\\",\\r\\n        \\\"versions\\\": [\\r\\n            {\\r\\n                \\\"versionNumber\\\": \\\"v1\\\",\\r\\n                \\\"apiId\\\": \\\"afd8eb5e-bba8-447b-8e28-76aac23ba074\\\"\\r\\n            }\\r\\n        ]\\r\\n    }\\r\\n}\""
								},
								{
									"name": "This status code indicates that the apiId specified is not found in the API Gateway",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/apis/:apiId/mock/enable?retainDefaultMockResponses=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"apis",
												":apiId",
												"mock",
												"enable"
											],
											"query": [
												{
													"key": "retainDefaultMockResponses",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "apiId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/apis/:apiId/mock/enable?retainDefaultMockResponses=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"apis",
												":apiId",
												"mock",
												"enable"
											],
											"query": [
												{
													"key": "retainDefaultMockResponses",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "apiId"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "This status code shows when the API is already in activated state or when invalid json or xml is provided in the example part of the operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/apis/:apiId/mock/enable?retainDefaultMockResponses=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"apis",
												":apiId",
												"mock",
												"enable"
											],
											"query": [
												{
													"key": "retainDefaultMockResponses",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "apiId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Disable API Mocking",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/apis/:apiId/mock/disable",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"apis",
										":apiId",
										"mock",
										"disable"
									],
									"variable": [
										{
											"key": "apiId",
											"value": "3c575e49-73d5-4ae8-a3a5-552544e5a4a0",
											"description": "(Required) API Id for the API to be deactivated"
										}
									]
								},
								"description": "Once API is disabled from mocking capability, at runtime all the API invocations are redirected to the native service instead of sending the mocked response"
							},
							"response": [
								{
									"name": "This status code shows when the API is already in activated state or in mocked state",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/apis/:apiId/mock/disable",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"apis",
												":apiId",
												"mock",
												"disable"
											],
											"variable": [
												{
													"key": "apiId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns the API object after successful disabling mocking of an API",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/apis/:apiId/mock/disable",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"apis",
												":apiId",
												"mock",
												"disable"
											],
											"variable": [
												{
													"key": "apiId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"{\\r\\n    \\\"apiResponse\\\": {\\r\\n        \\\"api\\\": {\\r\\n            \\\"apiDefinition\\\": {\\r\\n                \\\"type\\\": \\\"rest\\\",\\r\\n                \\\"info\\\": {\\r\\n                    \\\"description\\\": \\\"API to demonstrate mocking functionality in international developers day\\\",\\r\\n                    \\\"version\\\": \\\"v1\\\",\\r\\n                    \\\"title\\\": \\\"API_MOCKING\\\"\\r\\n                },\\r\\n                \\\"host\\\": \\\"localhost\\\",\\r\\n                \\\"schemes\\\": [\\r\\n                    \\\"http\\\"\\r\\n                ],\\r\\n                \\\"consumes\\\": [\\r\\n                    \\\"application/json\\\"\\r\\n                ],\\r\\n                \\\"security\\\": [],\\r\\n                \\\"paths\\\": {\\r\\n                    \\\"/conditionBasedMockedResponse\\\": {\\r\\n                        \\\"post\\\": {\\r\\n                            \\\"summary\\\": \\\"Configure condition and mocked response\\\",\\r\\n                            \\\"operationId\\\": \\\"conditionBasedMockedResponse\\\",\\r\\n                            \\\"produces\\\": [\\r\\n                                \\\"text/plain\\\"\\r\\n                            ],\\r\\n                            \\\"responses\\\": {\\r\\n                                \\\"200\\\": {\\r\\n                                    \\\"description\\\": \\\"200 response\\\",\\r\\n                                    \\\"content\\\": {\\r\\n                                        \\\"text/plain\\\": {\\r\\n                                            \\\"example\\\": \\\"No condition evaluates to true. \\\\nSo API-Gateway sent this default response.\\\"\\r\\n                                        }\\r\\n                                    }\\r\\n                                }\\r\\n                            },\\r\\n                            \\\"mockedResponses\\\": {\\r\\n                                \\\"200\\\": {\\r\\n                                    \\\"responseBody\\\": {\\r\\n                                        \\\"text/plain\\\": \\\"No condition evaluates to true. \\\\nSo API-Gateway sent this default response.\\\"\\r\\n                                    }\\r\\n                                }\\r\\n                            },\\r\\n                            \\\"enabled\\\": true\\r\\n                        },\\r\\n                        \\\"parameters\\\": [],\\r\\n                        \\\"displayName\\\": \\\"/conditionBasedMockedResponse\\\",\\r\\n                        \\\"enabled\\\": true\\r\\n                    },\\r\\n                    \\\"/customESBMockedResponse\\\": {\\r\\n                        \\\"post\\\": {\\r\\n                            \\\"summary\\\": \\\"Configure custom ESB mocked response\\\",\\r\\n                            \\\"operationId\\\": \\\"customESBMockedResponse\\\",\\r\\n                            \\\"produces\\\": [\\r\\n                                \\\"application/json\\\"\\r\\n                            ],\\r\\n                            \\\"responses\\\": {\\r\\n                                \\\"200\\\": {\\r\\n                                    \\\"description\\\": \\\"200 response\\\"\\r\\n                                }\\r\\n                            },\\r\\n                            \\\"mockedResponses\\\": {\\r\\n                                \\\"200\\\": {\\r\\n                                    \\\"responseBody\\\": {\\r\\n                                        \\\"application/json\\\": \\\"\\\"\\r\\n                                    }\\r\\n                                }\\r\\n                            },\\r\\n                            \\\"enabled\\\": true\\r\\n                        },\\r\\n                        \\\"parameters\\\": [],\\r\\n                        \\\"displayName\\\": \\\"/customESBMockedResponse\\\",\\r\\n                        \\\"enabled\\\": true\\r\\n                    },\\r\\n                    \\\"/dynamicMockedResponse\\\": {\\r\\n                        \\\"post\\\": {\\r\\n                            \\\"summary\\\": \\\"Dynamic mocked response set\\\",\\r\\n                            \\\"operationId\\\": \\\"dynamicMockedResponse\\\",\\r\\n                            \\\"produces\\\": [\\r\\n                                \\\"application/json\\\"\\r\\n                            ],\\r\\n                            \\\"responses\\\": {\\r\\n                                \\\"200\\\": {\\r\\n                                    \\\"description\\\": \\\"200 response\\\"\\r\\n                                }\\r\\n                            },\\r\\n                            \\\"mockedResponses\\\": {\\r\\n                                \\\"200\\\": {\\r\\n                                    \\\"responseBody\\\": {\\r\\n                                        \\\"application/json\\\": \\\"\\\"\\r\\n                                    }\\r\\n                                }\\r\\n                            },\\r\\n                            \\\"enabled\\\": true\\r\\n                        },\\r\\n                        \\\"parameters\\\": [],\\r\\n                        \\\"displayName\\\": \\\"/dynamicMockedResponse\\\",\\r\\n                        \\\"enabled\\\": true\\r\\n                    },\\r\\n                    \\\"/staticMockedResponse\\\": {\\r\\n                        \\\"post\\\": {\\r\\n                            \\\"summary\\\": \\\"Default mocked response from example\\\",\\r\\n                            \\\"operationId\\\": \\\"generateFromExample\\\",\\r\\n                            \\\"produces\\\": [\\r\\n                                \\\"application/json\\\",\\r\\n                                \\\"application/xml\\\"\\r\\n                            ],\\r\\n                            \\\"responses\\\": {\\r\\n                                \\\"200\\\": {\\r\\n                                    \\\"description\\\": \\\"200 response generated from example\\\",\\r\\n                                    \\\"content\\\": {\\r\\n                                        \\\"application/json\\\": {\\r\\n                                            \\\"example\\\": \\\"{\\\\\\\"resource\\\\\\\" : \\\\\\\"/generateFromExample\\\\\\\",\\\\\\\"description\\\\\\\" : \\\\\\\"Default mocked response from example for status code 200\\\\\\\"}\\\"\\r\\n                                        },\\r\\n                                        \\\"application/xml\\\": {\\r\\n                                            \\\"example\\\": \\\"<root><resource>/generateFromExample</resource><description>Default mocked response from example for status code 200</description></root>\\\"\\r\\n                                        }\\r\\n                                    }\\r\\n                                },\\r\\n                                \\\"201\\\": {\\r\\n                                    \\\"description\\\": \\\"201 response generated from schema\\\",\\r\\n                                    \\\"content\\\": {\\r\\n                                        \\\"application/json\\\": {\\r\\n                                            \\\"schema\\\": {\\r\\n                                                \\\"$ref\\\": \\\"#/components/schemas/Pet\\\"\\r\\n                                            }\\r\\n                                        },\\r\\n                                        \\\"application/xml\\\": {\\r\\n                                            \\\"schema\\\": {\\r\\n                                                \\\"$ref\\\": \\\"#/components/schemas/Pet\\\"\\r\\n                                            }\\r\\n                                        }\\r\\n                                    }\\r\\n                                }\\r\\n                            },\\r\\n                            \\\"mockedResponses\\\": {\\r\\n                                \\\"200\\\": {\\r\\n                                    \\\"responseBody\\\": {\\r\\n                                        \\\"application/json\\\": \\\"{\\\\\\\"resource\\\\\\\" : \\\\\\\"/generateFromExample\\\\\\\",\\\\\\\"description\\\\\\\" : \\\\\\\"Default mocked response from example for status code 200\\\\\\\"}\\\",\\r\\n                                        \\\"application/xml\\\": \\\"<root><resource>/generateFromExample</resource><description>Default mocked response from example for status code 200</description></root>\\\"\\r\\n                                    }\\r\\n                                },\\r\\n                                \\\"201\\\": {\\r\\n                                    \\\"responseBody\\\": {\\r\\n                                        \\\"application/json\\\": \\\"{\\\\\\\"birthday\\\\\\\":2059397944,\\\\\\\"name\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\r\\n                                        \\\"application/xml\\\": \\\"<birthday>921604684</birthday><name/>\\\"\\r\\n                                    }\\r\\n                                }\\r\\n                            },\\r\\n                            \\\"enabled\\\": true\\r\\n                        },\\r\\n                        \\\"parameters\\\": [],\\r\\n                        \\\"displayName\\\": \\\"/staticMockedResponse\\\",\\r\\n                        \\\"enabled\\\": true\\r\\n                    }\\r\\n                },\\r\\n                \\\"securityDefinitions\\\": {},\\r\\n                \\\"definitions\\\": {},\\r\\n                \\\"baseUriParameters\\\": [],\\r\\n                \\\"externalDocs\\\": [],\\r\\n                \\\"servers\\\": [\\r\\n                    {\\r\\n                        \\\"url\\\": \\\"http://localhost\\\"\\r\\n                    }\\r\\n                ],\\r\\n                \\\"components\\\": {\\r\\n                    \\\"schemas\\\": {\\r\\n                        \\\"Pet\\\": {\\r\\n                            \\\"required\\\": [\\r\\n                                \\\"name\\\"\\r\\n                            ],\\r\\n                            \\\"type\\\": \\\"object\\\",\\r\\n                            \\\"properties\\\": {\\r\\n                                \\\"birthday\\\": {\\r\\n                                    \\\"type\\\": \\\"integer\\\",\\r\\n                                    \\\"format\\\": \\\"int32\\\"\\r\\n                                },\\r\\n                                \\\"name\\\": {\\r\\n                                    \\\"type\\\": \\\"string\\\"\\r\\n                                }\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            },\\r\\n            \\\"nativeEndpoint\\\": [\\r\\n                {\\r\\n                    \\\"passSecurityHeaders\\\": true,\\r\\n                    \\\"uri\\\": \\\"http://localhost\\\",\\r\\n                    \\\"connectionTimeoutDuration\\\": 0,\\r\\n                    \\\"alias\\\": false\\r\\n                }\\r\\n            ],\\r\\n            \\\"apiName\\\": \\\"APIMocking\\\",\\r\\n            \\\"apiVersion\\\": \\\"v1\\\",\\r\\n            \\\"apiDescription\\\": \\\"API to demonstrate mocking functionality in international developers day\\\",\\r\\n            \\\"maturityState\\\": \\\"Beta\\\",\\r\\n            \\\"isActive\\\": false,\\r\\n            \\\"type\\\": \\\"REST\\\",\\r\\n            \\\"owner\\\": \\\"Administrator\\\",\\r\\n            \\\"policies\\\": [\\r\\n                \\\"19773e29-2838-4efc-aa04-793b48f4d22b\\\"\\r\\n            ],\\r\\n            \\\"scopes\\\": [],\\r\\n            \\\"publishedPortals\\\": [],\\r\\n            \\\"creationDate\\\": \\\"2018-11-01 13:44:58 GMT\\\",\\r\\n            \\\"systemVersion\\\": 1,\\r\\n            \\\"mockService\\\": {\\r\\n                \\\"enableMock\\\": false\\r\\n            },\\r\\n            \\\"id\\\": \\\"afd8eb5e-bba8-447b-8e28-76aac23ba074\\\"\\r\\n        },\\r\\n        \\\"responseStatus\\\": \\\"SUCCESS\\\",\\r\\n        \\\"versions\\\": [\\r\\n            {\\r\\n                \\\"versionNumber\\\": \\\"v1\\\",\\r\\n                \\\"apiId\\\": \\\"afd8eb5e-bba8-447b-8e28-76aac23ba074\\\"\\r\\n            }\\r\\n        ]\\r\\n    }\\r\\n}\""
								},
								{
									"name": "This status code indicates that the apiId specified is not found in the API Gateway",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/apis/:apiId/mock/disable",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"apis",
												":apiId",
												"mock",
												"disable"
											],
											"variable": [
												{
													"key": "apiId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/apis/:apiId/mock/disable",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"apis",
												":apiId",
												"mock",
												"disable"
											],
											"variable": [
												{
													"key": "apiId"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b75fb5b6-7516-4ac6-80c6-d6b1bf255175",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c6625976-1a14-4fa7-bd87-9ebf3acea429",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Scopes",
					"item": [
						{
							"name": "Get Scopes of API by API Id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/apis/:apiId/scopes",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"apis",
										":apiId",
										"scopes"
									],
									"variable": [
										{
											"key": "apiId",
											"value": "3c575e49-73d5-4ae8-a3a5-552544e5a4a0",
											"description": "(Required) API Id for the API to retrieve the versions"
										}
									]
								},
								"description": "An API Scope is a collection of resources or operations in an API. Users can create multiple scopes for a single API. Policies can be attached to an API level or scope level. This method retrieves the scopes of an API.\n\nYou can create, modify or delete the scopes in the update API operation using PUT /api/{apiId}"
							},
							"response": [
								{
									"name": "This status code indicates that the apiId specified is not found in the API Gateway",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/apis/:apiId/scopes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"apis",
												":apiId",
												"scopes"
											],
											"variable": [
												{
													"key": "apiId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/apis/:apiId/scopes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"apis",
												":apiId",
												"scopes"
											],
											"variable": [
												{
													"key": "apiId"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns API scopes",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/apis/:apiId/scopes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"apis",
												":apiId",
												"scopes"
											],
											"variable": [
												{
													"key": "apiId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"{\\r\\n  \\\"scopeReferences\\\": [\\r\\n    {\\r\\n      \\\"references\\\": [\\r\\n        {\\r\\n          \\\"resourcePath\\\": \\\"/random\\\",\\r\\n          \\\"supportedOperations\\\": []\\r\\n        }\\r\\n      ],\\r\\n      \\\"scope\\\": {\\r\\n        \\\"name\\\": \\\"Get_Scopes\\\",\\r\\n        \\\"description\\\": \\\"Dummy description of the scope\\\",\\r\\n        \\\"policies\\\": [\\r\\n          \\\"db1a42f4-e038-4a1b-82f4-8fee6fbd5687\\\"\\r\\n        ]\\r\\n      }\\r\\n    }\\r\\n  ]\\r\\n}\""
								}
							]
						},
						{
							"name": "Get Scope of API By API Id and Scope Name",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/apis/:apiId/scopes/:scopeName",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"apis",
										":apiId",
										"scopes",
										":scopeName"
									],
									"variable": [
										{
											"key": "apiId",
											"value": "3c575e49-73d5-4ae8-a3a5-552544e5a4a0",
											"description": "(Required) API Id for the API to retrieve the versions"
										},
										{
											"key": "scopeName",
											"value": "Pet Scope",
											"description": "(Required) Name of the scope"
										}
									]
								},
								"description": "Retrieve scopes of an API based on the scope name"
							},
							"response": [
								{
									"name": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/apis/:apiId/scopes/:scopeName",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"apis",
												":apiId",
												"scopes",
												":scopeName"
											],
											"variable": [
												{
													"key": "apiId"
												},
												{
													"key": "scopeName"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "This status code indicates that the apiId specified is not found in the API Gateway or scopeName is not found in the list of scopes",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/apis/:apiId/scopes/:scopeName",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"apis",
												":apiId",
												"scopes",
												":scopeName"
											],
											"variable": [
												{
													"key": "apiId"
												},
												{
													"key": "scopeName"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns API scopes",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/apis/:apiId/scopes/:scopeName",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"apis",
												":apiId",
												"scopes",
												":scopeName"
											],
											"variable": [
												{
													"key": "apiId"
												},
												{
													"key": "scopeName"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"{\\r\\n  \\\"scopeReferences\\\": [\\r\\n    {\\r\\n      \\\"references\\\": [\\r\\n        {\\r\\n          \\\"resourcePath\\\": \\\"/random\\\",\\r\\n          \\\"supportedOperations\\\": []\\r\\n        }\\r\\n      ],\\r\\n      \\\"scope\\\": {\\r\\n        \\\"name\\\": \\\"Get_Scopes\\\",\\r\\n        \\\"description\\\": \\\"Dummy description of the scope\\\",\\r\\n        \\\"policies\\\": [\\r\\n          \\\"db1a42f4-e038-4a1b-82f4-8fee6fbd5687\\\"\\r\\n        ]\\r\\n      }\\r\\n    }\\r\\n  ]\\r\\n}\""
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e62e1815-b4d5-478e-885e-7fbcba6f19e1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "08865f17-53f1-4744-aa55-1f4348631d77",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get API Details by Id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/apis/:apiId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"apis",
								":apiId"
							],
							"variable": [
								{
									"description": "(Required) API Id for the API to be retrieved",
									"key": "apiId",
									"value": "3c575e49-73d5-4ae8-a3a5-552544e5a4a0"
								}
							]
						},
						"description": "Retrieve an API based on the API id."
					},
					"response": [
						{
							"name": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId?format=<string>&url=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId"
									],
									"query": [
										{
											"key": "format",
											"value": "<string>"
										},
										{
											"key": "url",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "This status code indicates that the apiId specified is not found in the API Gateway",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId?format=<string>&url=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId"
									],
									"query": [
										{
											"key": "format",
											"value": "<string>"
										},
										{
											"key": "url",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "If the format is swagger, returns the swagger content in json and raml returns the raml content in yaml. If the format is openapi, returns the open api content in json. If the format is odata, you get a zip file holding the OData metadata and service document.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId?format=<string>&url=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId"
									],
									"query": [
										{
											"key": "format",
											"value": "<string>"
										},
										{
											"key": "url",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"{\\r\\n    \\\"apiResponse\\\": {\\r\\n        \\\"api\\\": {\\r\\n            \\\"apiDefinition\\\": {\\r\\n                \\\"type\\\": \\\"rest\\\",\\r\\n                \\\"info\\\": {\\r\\n                    \\\"description\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n                    \\\"version\\\": \\\"1.0\\\",\\r\\n                    \\\"title\\\": \\\"ChuckNorrisAPI\\\"\\r\\n                },\\r\\n                \\\"host\\\": \\\"api.chucknorris.io\\\",\\r\\n                \\\"basePath\\\": \\\"/jokes\\\",\\r\\n                \\\"schemes\\\": [\\r\\n                    \\\"https\\\"\\r\\n                ],\\r\\n                \\\"security\\\": [],\\r\\n                \\\"paths\\\": {\\r\\n                    \\\"/random\\\": {\\r\\n                        \\\"get\\\": {\\r\\n                            \\\"summary\\\": \\\"GET\\\",\\r\\n                            \\\"description\\\": \\\"\\\",\\r\\n                            \\\"operationId\\\": \\\"GET\\\",\\r\\n                            \\\"produces\\\": [\\r\\n                                \\\"application/json\\\"\\r\\n                            ],\\r\\n                            \\\"responses\\\": {},\\r\\n                            \\\"enabled\\\": true\\r\\n                        },\\r\\n                        \\\"enabled\\\": true\\r\\n                    }\\r\\n                },\\r\\n                \\\"securityDefinitions\\\": {},\\r\\n                \\\"definitions\\\": {},\\r\\n                \\\"baseUriParameters\\\": [],\\r\\n                \\\"externalDocs\\\": [],\\r\\n                \\\"servers\\\": [\\r\\n                    {\\r\\n                        \\\"url\\\": \\\"https://api.chucknorris.io/jokes\\\"\\r\\n                    }\\r\\n                ],\\r\\n                \\\"components\\\": {\\r\\n                    \\\"schemas\\\": {}\\r\\n                }\\r\\n            },\\r\\n            \\\"nativeEndpoint\\\": [\\r\\n                {\\r\\n                    \\\"passSecurityHeaders\\\": true,\\r\\n                    \\\"uri\\\": \\\"https://api.chucknorris.io/jokes\\\",\\r\\n                    \\\"connectionTimeoutDuration\\\": 0,\\r\\n                    \\\"alias\\\": false\\r\\n                }\\r\\n            ],\\r\\n            \\\"apiName\\\": \\\"ChuckNorris\\\",\\r\\n            \\\"apiVersion\\\": \\\"1.0\\\",\\r\\n            \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n            \\\"maturityState\\\": \\\"Beta\\\",\\r\\n            \\\"isActive\\\": false,\\r\\n            \\\"type\\\": \\\"REST\\\",\\r\\n            \\\"owner\\\": \\\"Administrator\\\",\\r\\n            \\\"policies\\\": [\\r\\n                \\\"08afbfa9-78e1-4c23-bb19-c0012464047e\\\"\\r\\n            ],\\r\\n            \\\"scopes\\\": [],\\r\\n            \\\"publishedPortals\\\": [],\\r\\n            \\\"creationDate\\\": \\\"2018-09-03 11:56:21 GMT\\\",\\r\\n            \\\"systemVersion\\\": 1,\\r\\n            \\\"id\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n        },\\r\\n        \\\"responseStatus\\\": \\\"SUCCESS\\\",\\r\\n        \\\"versions\\\": [\\r\\n            {\\r\\n                \\\"versionNumber\\\": \\\"1.0\\\",\\r\\n                \\\"apiId\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n       \\r\\n       }\\r\\n        ],\\r\\n        \\\"teams\\\": [\\r\\n            {\\r\\n                \\\"id\\\": \\\"Administrators\\\",\\r\\n                \\\"name\\\": \\\"Administrators\\\",\\r\\n                \\\"canDelete\\\": \\\"false\\\"\\r\\n            },\\r\\n            {\\r\\n                \\\"id\\\": \\\"Default\\\",\\r\\n                \\\"name\\\": \\\"Default\\\",\\r\\n                \\\"canDelete\\\": \\\"true\\\"\\r\\n            }\\r\\n        ]    }\\r\\n}\""
						}
					]
				},
				{
					"name": "Delete API by Id",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/apis/:apiId?forceDelete=true",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"apis",
								":apiId"
							],
							"query": [
								{
									"key": "forceDelete",
									"value": "true",
									"description": "Flag for force delete. Required when API is associated with some applications"
								}
							],
							"variable": [
								{
									"key": "apiId",
									"value": "3c575e49-73d5-4ae8-a3a5-552544e5a4a0",
									"description": "(Required) API Id for the API to be deleted"
								}
							]
						},
						"description": "Delete the inactive API"
					},
					"response": [
						{
							"name": "This response code returns when the deleted API is published to API portal or in active state",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId?forceDelete=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId"
									],
									"query": [
										{
											"key": "forceDelete",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "This status code indicates that the apiId specified is not found in the API Gateway",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId?forceDelete=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId"
									],
									"query": [
										{
											"key": "forceDelete",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId?forceDelete=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId"
									],
									"query": [
										{
											"key": "forceDelete",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns the apiId along with the error when unsuccessful",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId?forceDelete=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId"
									],
									"query": [
										{
											"key": "forceDelete",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<string>\",\n \"apiName\": \"<string>\",\n \"apiVersion\": \"<string>\",\n \"type\": \"<string>\",\n \"publishedPortals\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"systemVersion\": \"<integer>\",\n \"teams\": [\n  {\n   \"id\": \"<string>\",\n   \"name\": \"<string>\",\n   \"source\": \"<string>\"\n  },\n  {\n   \"id\": \"<string>\",\n   \"name\": \"<string>\",\n   \"source\": \"<string>\"\n  }\n ],\n \"active\": \"<boolean>\",\n \"apiId\": \"<string>\",\n \"errorReason\": \"<string>\",\n \"responseStatus\": \"<string>\"\n}"
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId?forceDelete=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId"
									],
									"query": [
										{
											"key": "forceDelete",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Activate API",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/apis/:apiId/activate",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"apis",
								":apiId",
								"activate"
							],
							"variable": [
								{
									"key": "apiId",
									"value": "2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0",
									"description": "(Required) API Id for the API to be activated"
								}
							]
						},
						"description": "Activate an API so that API is exposed to consumers"
					},
					"response": [
						{
							"name": "This status code shows when the API is already in activated state or when no operations/resources are present or none are enabled",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/activate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"activate"
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API.",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/activate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"activate"
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "This status code indicates that the apiId specified is not found in the API Gateway",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/activate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"activate"
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns the API object after successful activation",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/activate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"activate"
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"{\\r\\n    \\\"apiResponse\\\": {\\r\\n        \\\"api\\\": {\\r\\n            \\\"apiDefinition\\\": {\\r\\n                \\\"type\\\": \\\"rest\\\",\\r\\n                \\\"info\\\": {\\r\\n                    \\\"description\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n                    \\\"version\\\": \\\"1.0\\\",\\r\\n                    \\\"title\\\": \\\"ChuckNorrisAPI\\\"\\r\\n                },\\r\\n                \\\"host\\\": \\\"api.chucknorris.io\\\",\\r\\n                \\\"basePath\\\": \\\"/jokes\\\",\\r\\n                \\\"schemes\\\": [\\r\\n                    \\\"https\\\"\\r\\n                ],\\r\\n                \\\"security\\\": [],\\r\\n                \\\"paths\\\": {\\r\\n                    \\\"/random\\\": {\\r\\n                        \\\"get\\\": {\\r\\n                            \\\"summary\\\": \\\"GET\\\",\\r\\n                            \\\"description\\\": \\\"\\\",\\r\\n                            \\\"operationId\\\": \\\"GET\\\",\\r\\n                            \\\"produces\\\": [\\r\\n                                \\\"application/json\\\"\\r\\n                            ],\\r\\n                            \\\"responses\\\": {},\\r\\n                            \\\"enabled\\\": true\\r\\n                        },\\r\\n                        \\\"enabled\\\": true\\r\\n                    }\\r\\n                },\\r\\n                \\\"securityDefinitions\\\": {},\\r\\n                \\\"definitions\\\": {},\\r\\n                \\\"baseUriParameters\\\": [],\\r\\n                \\\"externalDocs\\\": [],\\r\\n                \\\"servers\\\": [\\r\\n                    {\\r\\n                        \\\"url\\\": \\\"https://api.chucknorris.io/jokes\\\"\\r\\n                    }\\r\\n                ],\\r\\n                \\\"components\\\": {\\r\\n                    \\\"schemas\\\": {}\\r\\n                }\\r\\n            },\\r\\n            \\\"nativeEndpoint\\\": [\\r\\n                {\\r\\n                    \\\"passSecurityHeaders\\\": true,\\r\\n                    \\\"uri\\\": \\\"https://api.chucknorris.io/jokes\\\",\\r\\n                    \\\"connectionTimeoutDuration\\\": 0,\\r\\n                    \\\"alias\\\": false\\r\\n                }\\r\\n            ],\\r\\n            \\\"apiName\\\": \\\"ChuckNorris\\\",\\r\\n            \\\"apiVersion\\\": \\\"1.0\\\",\\r\\n            \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n            \\\"maturityState\\\": \\\"Beta\\\",\\r\\n            \\\"isActive\\\": false,\\r\\n            \\\"type\\\": \\\"REST\\\",\\r\\n            \\\"owner\\\": \\\"Administrator\\\",\\r\\n            \\\"policies\\\": [\\r\\n                \\\"08afbfa9-78e1-4c23-bb19-c0012464047e\\\"\\r\\n            ],\\r\\n            \\\"scopes\\\": [],\\r\\n            \\\"publishedPortals\\\": [],\\r\\n            \\\"creationDate\\\": \\\"2018-09-03 11:56:21 GMT\\\",\\r\\n            \\\"systemVersion\\\": 1,\\r\\n            \\\"id\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n        },\\r\\n        \\\"responseStatus\\\": \\\"SUCCESS\\\",\\r\\n        \\\"versions\\\": [\\r\\n            {\\r\\n                \\\"versionNumber\\\": \\\"1.0\\\",\\r\\n                \\\"apiId\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n            }\\r\\n        ]\\r\\n    }\\r\\n}\""
						}
					]
				},
				{
					"name": "Deactivate API",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/apis/:apiId/deactivate",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"apis",
								":apiId",
								"deactivate"
							],
							"variable": [
								{
									"description": "(Required) API Id for the API to be deactivated",
									"key": "apiId",
									"value": "2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0"
								}
							]
						},
						"description": "Deactivate an API so that API is not exposed to consumers"
					},
					"response": [
						{
							"name": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API.",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/deactivate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"deactivate"
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns the API object after successful deactivation",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/deactivate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"deactivate"
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"{\\r\\n    \\\"apiResponse\\\": {\\r\\n        \\\"api\\\": {\\r\\n            \\\"apiDefinition\\\": {\\r\\n                \\\"type\\\": \\\"rest\\\",\\r\\n                \\\"info\\\": {\\r\\n                    \\\"description\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n                    \\\"version\\\": \\\"1.0\\\",\\r\\n                    \\\"title\\\": \\\"ChuckNorrisAPI\\\"\\r\\n                },\\r\\n                \\\"host\\\": \\\"api.chucknorris.io\\\",\\r\\n                \\\"basePath\\\": \\\"/jokes\\\",\\r\\n                \\\"schemes\\\": [\\r\\n                    \\\"https\\\"\\r\\n                ],\\r\\n                \\\"security\\\": [],\\r\\n                \\\"paths\\\": {\\r\\n                    \\\"/random\\\": {\\r\\n                        \\\"get\\\": {\\r\\n                            \\\"summary\\\": \\\"GET\\\",\\r\\n                            \\\"description\\\": \\\"\\\",\\r\\n                            \\\"operationId\\\": \\\"GET\\\",\\r\\n                            \\\"produces\\\": [\\r\\n                                \\\"application/json\\\"\\r\\n                            ],\\r\\n                            \\\"responses\\\": {},\\r\\n                            \\\"enabled\\\": true\\r\\n                        },\\r\\n                        \\\"enabled\\\": true\\r\\n                    }\\r\\n                },\\r\\n                \\\"securityDefinitions\\\": {},\\r\\n                \\\"definitions\\\": {},\\r\\n                \\\"baseUriParameters\\\": [],\\r\\n                \\\"externalDocs\\\": [],\\r\\n                \\\"servers\\\": [\\r\\n                    {\\r\\n                        \\\"url\\\": \\\"https://api.chucknorris.io/jokes\\\"\\r\\n                    }\\r\\n                ],\\r\\n                \\\"components\\\": {\\r\\n                    \\\"schemas\\\": {}\\r\\n                }\\r\\n            },\\r\\n            \\\"nativeEndpoint\\\": [\\r\\n                {\\r\\n                    \\\"passSecurityHeaders\\\": true,\\r\\n                    \\\"uri\\\": \\\"https://api.chucknorris.io/jokes\\\",\\r\\n                    \\\"connectionTimeoutDuration\\\": 0,\\r\\n                    \\\"alias\\\": false\\r\\n                }\\r\\n            ],\\r\\n            \\\"apiName\\\": \\\"ChuckNorris\\\",\\r\\n            \\\"apiVersion\\\": \\\"1.0\\\",\\r\\n            \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n            \\\"maturityState\\\": \\\"Beta\\\",\\r\\n            \\\"isActive\\\": false,\\r\\n            \\\"type\\\": \\\"REST\\\",\\r\\n            \\\"owner\\\": \\\"Administrator\\\",\\r\\n            \\\"policies\\\": [\\r\\n                \\\"08afbfa9-78e1-4c23-bb19-c0012464047e\\\"\\r\\n            ],\\r\\n            \\\"scopes\\\": [],\\r\\n            \\\"publishedPortals\\\": [],\\r\\n            \\\"creationDate\\\": \\\"2018-09-03 11:56:21 GMT\\\",\\r\\n            \\\"systemVersion\\\": 1,\\r\\n            \\\"id\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n        },\\r\\n        \\\"responseStatus\\\": \\\"SUCCESS\\\",\\r\\n        \\\"versions\\\": [\\r\\n            {\\r\\n                \\\"versionNumber\\\": \\\"1.0\\\",\\r\\n                \\\"apiId\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n            }\\r\\n        ]\\r\\n    }\\r\\n}\""
						},
						{
							"name": "This status code indicates that the apiId specified is not found in the API Gateway",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/deactivate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"deactivate"
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "This status code shows when the API is already in de-activated state",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/deactivate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"deactivate"
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Publish API",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"communities\": [\n        \"3bdf8005-5685-3ef5-b132-de4681963fb6\"\n    ],\n    \"endpoints\": [\n        \"http://SAG-1YVHZY2:5555/gateway/Petstore/1.0.5\"\n    ]\n}"
						},
						"url": {
							"raw": "{{baseURL}}/apis/:apiId/publish?portalGatewayId=d663e093-b39a-4330-93b9-fcb68d1a2c3d",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"apis",
								":apiId",
								"publish"
							],
							"query": [
								{
									"key": "portalGatewayId",
									"value": "d663e093-b39a-4330-93b9-fcb68d1a2c3d"
								}
							],
							"variable": [
								{
									"description": "(Required) API Id for the API to be published",
									"key": "apiId",
									"value": "2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0"
								}
							]
						},
						"description": "This REST operation is used to publish API to the registered API Portal"
					},
					"response": [
						{
							"name": "This status code indicates that the apiId specified is not found in the API Gateway",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"portalGatewayId\": \"<string>\",\n    \"communities\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"endpoints\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/publish",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"publish"
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API.",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"portalGatewayId\": \"<string>\",\n    \"communities\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"endpoints\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/publish",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"publish"
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "This status code shows when the user missed the mandatory portalGatewayId or invalid portalGatewayId in the request body",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"portalGatewayId\": \"<string>\",\n    \"communities\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"endpoints\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/publish",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"publish"
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns the API object after successful publish",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"portalGatewayId\": \"<string>\",\n    \"communities\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"endpoints\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/publish",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"publish"
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"{\\r\\n  \\\"apiResponse\\\": {\\r\\n    \\\"api\\\": {\\r\\n      \\\"apiDefinition\\\": {\\r\\n        \\\"type\\\": \\\"rest\\\",\\r\\n        \\\"info\\\": {\\r\\n          \\\"vendorExtensions\\\": {},\\r\\n          \\\"description\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n          \\\"version\\\": \\\"1.0\\\",\\r\\n          \\\"title\\\": \\\"ChuckNorrisAPI\\\"\\r\\n        },\\r\\n        \\\"host\\\": \\\"api.chucknorris.io\\\",\\r\\n        \\\"basePath\\\": \\\"/jokes\\\",\\r\\n        \\\"schemes\\\": [\\r\\n          \\\"https\\\"\\r\\n        ],\\r\\n        \\\"paths\\\": {\\r\\n          \\\"/random\\\": {\\r\\n            \\\"get\\\": {\\r\\n              \\\"summary\\\": \\\"GET\\\",\\r\\n              \\\"description\\\": \\\"\\\",\\r\\n              \\\"operationId\\\": \\\"GET\\\",\\r\\n              \\\"produces\\\": [\\r\\n                \\\"application/json\\\"\\r\\n              ],\\r\\n              \\\"parameters\\\": [],\\r\\n              \\\"responses\\\": {},\\r\\n              \\\"enabled\\\": true\\r\\n            },\\r\\n            \\\"enabled\\\": true\\r\\n          }\\r\\n        },\\r\\n        \\\"definitions\\\": {}\\r\\n      },\\r\\n      \\\"nativeEndpoint\\\": [\\r\\n        {\\r\\n          \\\"passSecurityHeaders\\\": true,\\r\\n          \\\"uri\\\": \\\"https://api.chucknorris.io/jokes\\\",\\r\\n          \\\"connectionTimeoutDuration\\\": 0,\\r\\n          \\\"alias\\\": false\\r\\n        }\\r\\n      ],\\r\\n      \\\"apiName\\\": \\\"ChuckNorrisAPI\\\",\\r\\n      \\\"apiVersion\\\": \\\"1.0\\\",\\r\\n      \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n      \\\"maturityState\\\": \\\"Beta\\\",\\r\\n      \\\"isActive\\\": false,\\r\\n      \\\"type\\\": \\\"REST\\\",\\r\\n      \\\"owner\\\": \\\"Administrator\\\",\\r\\n      \\\"policies\\\": [\\r\\n        \\\"879068cd-8628-4f2a-b903-4e6613ca12ba\\\"\\r\\n      ],\\r\\n      \\\"referencedFiles\\\": {\\r\\n        \\\"ChuckNorrisAPI.json\\\": \\\"{\\\\r\\\\n  \\\\\\\"swagger\\\\\\\": \\\\\\\"2.0\\\\\\\",\\\\r\\\\n  \\\\\\\"info\\\\\\\": {\\\\r\\\\n    \\\\\\\"description\\\\\\\": \\\\\\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\\\\\",\\\\r\\\\n    \\\\\\\"title\\\\\\\": \\\\\\\"ChuckNorrisAPI\\\\\\\",\\\\r\\\\n    \\\\\\\"version\\\\\\\": \\\\\\\"1.0\\\\\\\"\\\\r\\\\n  },\\\\r\\\\n  \\\\\\\"host\\\\\\\": \\\\\\\"api.chucknorris.io\\\\\\\",\\\\r\\\\n  \\\\\\\"basePath\\\\\\\": \\\\\\\"/jokes\\\\\\\",\\\\r\\\\n  \\\\\\\"schemes\\\\\\\": [\\\\r\\\\n    \\\\\\\"https\\\\\\\"\\\\r\\\\n  ],\\\\r\\\\n  \\\\\\\"paths\\\\\\\": {\\\\r\\\\n    \\\\\\\"/random\\\\\\\": {\\\\r\\\\n      \\\\\\\"get\\\\\\\": {\\\\r\\\\n        \\\\\\\"summary\\\\\\\": \\\\\\\"GET\\\\\\\",\\\\r\\\\n        \\\\\\\"deprecated\\\\\\\": false,\\\\r\\\\n        \\\\\\\"produces\\\\\\\": [\\\\r\\\\n          \\\\\\\"application/json\\\\\\\"\\\\r\\\\n        ],\\\\r\\\\n        \\\\\\\"description\\\\\\\": \\\\\\\"\\\\\\\",\\\\r\\\\n        \\\\\\\"operationId\\\\\\\": \\\\\\\"GET\\\\\\\"\\\\r\\\\n      }\\\\r\\\\n    }\\\\r\\\\n  }\\\\r\\\\n}\\\\r\\\\n\\\"\\r\\n      },\\r\\n      \\\"scopes\\\": [],\\r\\n      \\\"publishedPortals\\\": [],\\r\\n      \\\"creationDate\\\": \\\"2017-03-13 09:38:30 GMT\\\",\\r\\n      \\\"systemVersion\\\": 1,\\r\\n      \\\"id\\\": \\\"25fb937a-8360-41ab-8be5-987b14fe631d\\\",\\r\\n      \\\"oauth2ScopeName\\\": \\\"25fb937a-8360-41ab-8be5-987b14fe631d\\\"\\r\\n    },\\r\\n    \\\"responseStatus\\\": \\\"SUCCESS\\\"\\r\\n  }\\r\\n}\""
						}
					]
				},
				{
					"name": "Unpublish API",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/apis/:apiId/unpublish?portalGatewayId=d663e093-b39a-4330-93b9-fcb68d1a2c3d&forceUnpublish=true",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"apis",
								":apiId",
								"unpublish"
							],
							"query": [
								{
									"key": "portalGatewayId",
									"value": "d663e093-b39a-4330-93b9-fcb68d1a2c3d"
								},
								{
									"key": "forceUnpublish",
									"value": "true"
								}
							],
							"variable": [
								{
									"description": "(Required) API Id for the API to be unpublished",
									"key": "apiId",
									"value": "2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0"
								}
							]
						},
						"description": "Unpublish API from the registered API Portal"
					},
					"response": [
						{
							"name": "This status code indicates that the apiId specified is not found in the API Gateway",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/unpublish",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"unpublish"
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API.",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/unpublish",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"unpublish"
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "This status code shows when the user missed the mandatory portalGatewayId or invalid portalGatewayId in the request body",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/unpublish",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"unpublish"
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns the API object after successful unpublish",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/unpublish",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"unpublish"
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"{\\r\\n  \\\"apiResponse\\\": {\\r\\n    \\\"api\\\": {\\r\\n      \\\"apiDefinition\\\": {\\r\\n        \\\"type\\\": \\\"rest\\\",\\r\\n        \\\"info\\\": {\\r\\n          \\\"vendorExtensions\\\": {},\\r\\n          \\\"description\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n          \\\"version\\\": \\\"1.0\\\",\\r\\n          \\\"title\\\": \\\"ChuckNorrisAPI\\\"\\r\\n        },\\r\\n        \\\"host\\\": \\\"api.chucknorris.io\\\",\\r\\n        \\\"basePath\\\": \\\"/jokes\\\",\\r\\n        \\\"schemes\\\": [\\r\\n          \\\"https\\\"\\r\\n        ],\\r\\n        \\\"paths\\\": {\\r\\n          \\\"/random\\\": {\\r\\n            \\\"get\\\": {\\r\\n              \\\"summary\\\": \\\"GET\\\",\\r\\n              \\\"description\\\": \\\"\\\",\\r\\n              \\\"operationId\\\": \\\"GET\\\",\\r\\n              \\\"produces\\\": [\\r\\n                \\\"application/json\\\"\\r\\n              ],\\r\\n              \\\"parameters\\\": [],\\r\\n              \\\"responses\\\": {},\\r\\n              \\\"enabled\\\": true\\r\\n            },\\r\\n            \\\"enabled\\\": true\\r\\n          }\\r\\n        },\\r\\n        \\\"definitions\\\": {}\\r\\n      },\\r\\n      \\\"nativeEndpoint\\\": [\\r\\n        {\\r\\n          \\\"passSecurityHeaders\\\": true,\\r\\n          \\\"uri\\\": \\\"https://api.chucknorris.io/jokes\\\",\\r\\n          \\\"connectionTimeoutDuration\\\": 0,\\r\\n          \\\"alias\\\": false\\r\\n        }\\r\\n      ],\\r\\n      \\\"apiName\\\": \\\"ChuckNorrisAPI\\\",\\r\\n      \\\"apiVersion\\\": \\\"1.0\\\",\\r\\n      \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n      \\\"maturityState\\\": \\\"Beta\\\",\\r\\n      \\\"isActive\\\": false,\\r\\n      \\\"type\\\": \\\"REST\\\",\\r\\n      \\\"owner\\\": \\\"Administrator\\\",\\r\\n      \\\"policies\\\": [\\r\\n        \\\"879068cd-8628-4f2a-b903-4e6613ca12ba\\\"\\r\\n      ],\\r\\n      \\\"referencedFiles\\\": {\\r\\n        \\\"ChuckNorrisAPI.json\\\": \\\"{\\\\r\\\\n  \\\\\\\"swagger\\\\\\\": \\\\\\\"2.0\\\\\\\",\\\\r\\\\n  \\\\\\\"info\\\\\\\": {\\\\r\\\\n    \\\\\\\"description\\\\\\\": \\\\\\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\\\\\",\\\\r\\\\n    \\\\\\\"title\\\\\\\": \\\\\\\"ChuckNorrisAPI\\\\\\\",\\\\r\\\\n    \\\\\\\"version\\\\\\\": \\\\\\\"1.0\\\\\\\"\\\\r\\\\n  },\\\\r\\\\n  \\\\\\\"host\\\\\\\": \\\\\\\"api.chucknorris.io\\\\\\\",\\\\r\\\\n  \\\\\\\"basePath\\\\\\\": \\\\\\\"/jokes\\\\\\\",\\\\r\\\\n  \\\\\\\"schemes\\\\\\\": [\\\\r\\\\n    \\\\\\\"https\\\\\\\"\\\\r\\\\n  ],\\\\r\\\\n  \\\\\\\"paths\\\\\\\": {\\\\r\\\\n    \\\\\\\"/random\\\\\\\": {\\\\r\\\\n      \\\\\\\"get\\\\\\\": {\\\\r\\\\n        \\\\\\\"summary\\\\\\\": \\\\\\\"GET\\\\\\\",\\\\r\\\\n        \\\\\\\"deprecated\\\\\\\": false,\\\\r\\\\n        \\\\\\\"produces\\\\\\\": [\\\\r\\\\n          \\\\\\\"application/json\\\\\\\"\\\\r\\\\n        ],\\\\r\\\\n        \\\\\\\"description\\\\\\\": \\\\\\\"\\\\\\\",\\\\r\\\\n        \\\\\\\"operationId\\\\\\\": \\\\\\\"GET\\\\\\\"\\\\r\\\\n      }\\\\r\\\\n    }\\\\r\\\\n  }\\\\r\\\\n}\\\\r\\\\n\\\"\\r\\n      },\\r\\n      \\\"scopes\\\": [],\\r\\n      \\\"publishedPortals\\\": [],\\r\\n      \\\"creationDate\\\": \\\"2017-03-13 09:38:30 GMT\\\",\\r\\n      \\\"systemVersion\\\": 1,\\r\\n      \\\"id\\\": \\\"25fb937a-8360-41ab-8be5-987b14fe631d\\\",\\r\\n      \\\"oauth2ScopeName\\\": \\\"25fb937a-8360-41ab-8be5-987b14fe631d\\\"\\r\\n    },\\r\\n    \\\"responseStatus\\\": \\\"SUCCESS\\\"\\r\\n  }\\r\\n}\""
						}
					]
				},
				{
					"name": "Notify API Implementation",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/apis/:apiId/implementation?nativeBaseURL=http://petstore.swagger.io/v2&overwriteAlias=false&maturityState=Beta",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"apis",
								":apiId",
								"implementation"
							],
							"query": [
								{
									"key": "nativeBaseURL",
									"value": "http://petstore.swagger.io/v2",
									"description": "Base URL of the native API"
								},
								{
									"key": "overwriteAlias",
									"value": "false",
									"description": "Flag to replace the endpoint alias that is used in the routing policy of the API with the given value of 'nativeBaseURL' parameter."
								},
								{
									"key": "maturityState",
									"value": "Beta",
									"description": "Value of the 'maturity state' attribute of the API. The 'maturity state' of the API can be set to its one of possible value (from its defines values in extended settings configuration) to depict the completion its implementation"
								}
							],
							"variable": [
								{
									"description": "(Required) API Id for the API to be updated",
									"key": "apiId",
									"value": "2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0"
								}
							]
						},
						"description": "An API Provider tool can use this operation to update the API in APIGateway after completion of its implementation in their end"
					},
					"response": [
						{
							"name": "This status code indicates that the apiId specified is not found in the API Gateway",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/implementation?nativeBaseURL=<string>&overwriteAlias=<boolean>&maturityState=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"implementation"
									],
									"query": [
										{
											"key": "nativeBaseURL",
											"value": "<string>"
										},
										{
											"key": "overwriteAlias",
											"value": "<boolean>"
										},
										{
											"key": "maturityState",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "This status code shows when the user missed the mandatory fields like type, file/url/apiDefinition in the request or provide a invalid request body",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/implementation?nativeBaseURL=<string>&overwriteAlias=<boolean>&maturityState=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"implementation"
									],
									"query": [
										{
											"key": "nativeBaseURL",
											"value": "<string>"
										},
										{
											"key": "overwriteAlias",
											"value": "<boolean>"
										},
										{
											"key": "maturityState",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns the updated API object",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/implementation?nativeBaseURL=<string>&overwriteAlias=<boolean>&maturityState=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"implementation"
									],
									"query": [
										{
											"key": "nativeBaseURL",
											"value": "<string>"
										},
										{
											"key": "overwriteAlias",
											"value": "<boolean>"
										},
										{
											"key": "maturityState",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"apiId\": \"<string>\",\n \"api\": {\n  \"apiDefinition\": {\n   \"type\": \"<string>\",\n   \"description\": \"<string>\",\n   \"title\": \"<string>\",\n   \"version\": \"<string>\",\n   \"uri\": [\n    \"<string>\"\n   ],\n   \"serviceRegistryDisplayName\": \"<string>\"\n  },\n  \"nativeEndpoint\": [\n   {\n    \"optimizationTechnique\": \"<string>\",\n    \"passSecurityHeaders\": \"<boolean>\",\n    \"uri\": \"<string>\",\n    \"connectionTimeoutDuration\": \"<integer>\",\n    \"alias\": \"<boolean>\"\n   }\n  ],\n  \"apiName\": \"<string>\",\n  \"apiVersion\": \"<string>\",\n  \"apiEndpointPrefix\": \"<string>\",\n  \"apiDescription\": \"<string>\",\n  \"maturityState\": \"<string>\",\n  \"apiGroups\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"isActive\": \"<boolean>\",\n  \"type\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"policies\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"rootFileName\": \"<string>\",\n  \"scopes\": [\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"getoAuth2ScopeName\": \"<string>\",\n    \"policies\": [\n     \"<string>\",\n     \"<string>\"\n    ],\n    \"mashedUpAPI\": \"<boolean>\"\n   },\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"getoAuth2ScopeName\": \"<string>\",\n    \"policies\": [\n     \"<string>\",\n     \"<string>\"\n    ],\n    \"mashedUpAPI\": \"<boolean>\"\n   }\n  ],\n  \"publishedPortals\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"publishedToRegistry\": \"<boolean>\",\n  \"creationDate\": \"<string>\",\n  \"lastModified\": \"<string>\",\n  \"prevVersion\": \"<string>\",\n  \"nextVersion\": \"<string>\",\n  \"systemVersion\": \"<integer>\",\n  \"provider\": \"<string>\",\n  \"centraSiteURL\": \"<string>\",\n  \"mockService\": {\n   \"enableMock\": \"<boolean>\",\n   \"runAsUser\": \"<string>\",\n   \"service\": \"<string>\"\n  },\n  \"apiDocuments\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"id\": \"<string>\",\n  \"oauth2ScopeName\": \"<string>\"\n },\n \"responseStatus\": \"<string>\",\n \"errorReason\": \"<string>\",\n \"gatewayEndPoints\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"microgatewayEndPoints\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"reason\": \"<object>\",\n \"pubSOAPFlavor\": \"<string>\",\n \"restrictViewAsset\": \"<boolean>\",\n \"rootFileLocation\": \"<string>\",\n \"teams\": [\n  {\n   \"id\": \"<string>\",\n   \"name\": \"<string>\",\n   \"source\": \"<string>\"\n  },\n  {\n   \"id\": \"<string>\",\n   \"name\": \"<string>\",\n   \"source\": \"<string>\"\n  }\n ],\n \"portalGatewayDataEntries\": \"<object>\"\n}"
						},
						{
							"name": "Untitled Response",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/implementation?nativeBaseURL=<string>&overwriteAlias=<boolean>&maturityState=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"implementation"
									],
									"query": [
										{
											"key": "nativeBaseURL",
											"value": "<string>"
										},
										{
											"key": "overwriteAlias",
											"value": "<boolean>"
										},
										{
											"key": "maturityState",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get Applications associated with API",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/apis/:apiId/applications",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"apis",
								":apiId",
								"applications"
							],
							"variable": [
								{
									"key": "apiId",
									"value": "2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0",
									"description": "(Required) API Id for the API to find the associated applications"
								}
							]
						},
						"description": "Retrieves the list of registered applications of an API"
					},
					"response": [
						{
							"name": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/applications",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"applications"
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns the list of associated applications",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/applications",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"applications"
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"{\\r\\n  \\\"applications\\\": [\\r\\n    {\\r\\n      \\\"name\\\": \\\"app1\\\",\\r\\n      \\\"description\\\": null,\\r\\n      \\\"contactEmails\\\": [],\\r\\n      \\\"identifiers\\\": [],\\r\\n      \\\"siteURLs\\\": [],\\r\\n      \\\"version\\\": \\\"1.0\\\",\\r\\n      \\\"id\\\": \\\"ae48cd69-421e-4bdf-a4d0-e86996a78f68\\\",\\r\\n      \\\"created\\\": \\\"2017-03-13 13:12:03 GMT\\\",\\r\\n      \\\"lastupdated\\\": null,\\r\\n      \\\"consumingAPIs\\\": [\\r\\n        \\\"25fb937a-8360-41ab-8be5-987b14fe631d\\\"\\r\\n      ],\\r\\n      \\\"accessTokens\\\": {\\r\\n        \\\"apiAccessKey_credentials\\\": {\\r\\n          \\\"apiAccessKey\\\": \\\"cec4b46b-3569-4f73-a561-172dd67c182a\\\",\\r\\n          \\\"expirationInterval\\\": null\\r\\n        },\\r\\n        \\\"oauth_credentials\\\": {\\r\\n          \\\"clientID\\\": \\\"40b78ed3-d171-4bd3-99db-51dd2fa71753\\\",\\r\\n          \\\"clientSecret\\\": \\\"024b9525-6526-45c8-a66c-d192442064e1\\\",\\r\\n          \\\"clientName\\\": \\\"app1-6b753c2a-0567-462d-a4ea-1b143ab7a381\\\",\\r\\n          \\\"scopes\\\": [\\r\\n            \\\"25fb937a-8360-41ab-8be5-987b14fe631d\\\"\\r\\n          ],\\r\\n          \\\"token_lifetime\\\": \\\"3600\\\",\\r\\n          \\\"token_refresh_limit\\\": \\\"0\\\",\\r\\n          \\\"redirect_uris\\\": [\\r\\n            \\\"https://placeholder_redirect_uri\\\"\\r\\n          ],\\r\\n          \\\"Type\\\": \\\"confidential\\\"\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  ]\\r\\n}\""
						},
						{
							"name": "This status code indicates that the apiId specified is not found in the API Gateway",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/applications",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"applications"
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get Source",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/apis/:apiId/source",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"apis",
								":apiId",
								"source"
							],
							"variable": [
								{
									"description": "(Required) API Id for the API to download the source content",
									"key": "apiId",
									"value": "2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0"
								}
							]
						},
						"description": "Download the API definition that was used to create the API. This is applicable only for SOAP APIs."
					},
					"response": [
						{
							"name": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/source",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"source"
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "This status code returns when the specified API is not a SOAP API",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/source",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"source"
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "This status code indicates that the apiId specified is not found in the API Gateway",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/source",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"source"
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns the source files along with the root file name",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/source",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"source"
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "multipart/mixed"
								}
							],
							"cookie": [],
							"body": "Message-ID: <296841806.5.1489555643275.JavaMail.MRIZ@MCMRIZ01>\r\nMIME-Version: 1.0\r\nContent-Type: multipart/mixed; \r\n\tboundary=\"----=_Part_4_1098332532.1489555643274\"\r\n\r\n------=_Part_4_1098332532.1489555643274\r\ncontent-type: application/zip\r\nContent-Disposition: attachment; filename=\"echoService.zip\"\r\n\r\nfile content in zip format\r\n------=_Part_4_1098332532.1489555643274\r\ncontent-type: text/plain\r\nContent-Disposition: inline; name=\"rootFileName\"\r\n\r\necho.wsdl\r\n------=_Part_4_1098332532.1489555643274--"
						}
					]
				},
				{
					"name": "Get Associated Global Policies",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/apis/:apiId/globalPolicies",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"apis",
								":apiId",
								"globalPolicies"
							],
							"variable": [
								{
									"description": "(Required) API Id for the API to find the list of applicable global policies",
									"key": "apiId",
									"value": "2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0"
								}
							]
						},
						"description": "Retrieves the list of active global policies applicable to this API"
					},
					"response": [
						{
							"name": "This status code indicates that the apiId specified is not found in the API Gateway",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/globalPolicies",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"globalPolicies"
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/globalPolicies",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"globalPolicies"
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns the list of global policy names",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/globalPolicies",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"globalPolicies"
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"{\\r\\n  \\\"globalPolicies\\\": [\\r\\n    \\\"GlobalLogInvocationPolicy\\\"\\r\\n  ]\\r\\n}\""
						}
					]
				},
				{
					"name": "Download Provider Specification",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/apis/:apiId/providerspecification?format=swagger",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"apis",
								":apiId",
								"providerspecification"
							],
							"query": [
								{
									"key": "format",
									"value": "swagger"
								}
							],
							"variable": [
								{
									"key": "apiId",
									"value": "2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0",
									"description": "(Required) API Id for the API to retrieve the versions"
								}
							]
						},
						"description": "Downloads the provider specification of REST and SOAP based APIs. Provider specification is nothing but, the specification file (in swagger or wsdl format) with out the concrete API Gateway endpoint and contains all resources/methods/operation irrespective of whether they are exposed to consumer"
					},
					"response": [
						{
							"name": "Untitled Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/providerspecification?format=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"providerspecification"
									],
									"query": [
										{
											"key": "format",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "This status code indicates that the apiId specified is not found in the API Gateway",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/providerspecification?format=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"providerspecification"
									],
									"query": [
										{
											"key": "format",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "If the format is swagger, returns the swagger content in json. If the format is wsdl, returns the wsdl content in xml.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis/:apiId/providerspecification?format=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis",
										":apiId",
										"providerspecification"
									],
									"query": [
										{
											"key": "format",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "apiId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"versions\": [\n  {\n   \"versionNumber\": \"<string>\",\n   \"apiId\": \"<string>\"\n  },\n  {\n   \"versionNumber\": \"<string>\",\n   \"apiId\": \"<string>\"\n  }\n ],\n \"gatewayEndPoints\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"api\": {\n  \"apiDefinition\": {\n   \"type\": \"<string>\",\n   \"description\": \"<string>\",\n   \"title\": \"<string>\",\n   \"version\": \"<string>\",\n   \"uri\": [\n    \"<string>\"\n   ],\n   \"serviceRegistryDisplayName\": \"<string>\"\n  },\n  \"nativeEndpoint\": [\n   {\n    \"optimizationTechnique\": \"<string>\",\n    \"passSecurityHeaders\": \"<boolean>\",\n    \"uri\": \"<string>\",\n    \"connectionTimeoutDuration\": \"<integer>\",\n    \"alias\": \"<boolean>\"\n   }\n  ],\n  \"apiName\": \"<string>\",\n  \"apiVersion\": \"<string>\",\n  \"apiEndpointPrefix\": \"<string>\",\n  \"apiDescription\": \"<string>\",\n  \"maturityState\": \"<string>\",\n  \"apiGroups\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"isActive\": \"<boolean>\",\n  \"type\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"policies\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"rootFileName\": \"<string>\",\n  \"scopes\": [\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"getoAuth2ScopeName\": \"<string>\",\n    \"policies\": [\n     \"<string>\",\n     \"<string>\"\n    ],\n    \"mashedUpAPI\": \"<boolean>\"\n   },\n   {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"getoAuth2ScopeName\": \"<string>\",\n    \"policies\": [\n     \"<string>\",\n     \"<string>\"\n    ],\n    \"mashedUpAPI\": \"<boolean>\"\n   }\n  ],\n  \"publishedPortals\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"publishedToRegistry\": \"<boolean>\",\n  \"creationDate\": \"<string>\",\n  \"lastModified\": \"<string>\",\n  \"prevVersion\": \"<string>\",\n  \"nextVersion\": \"<string>\",\n  \"systemVersion\": \"<integer>\",\n  \"provider\": \"<string>\",\n  \"centraSiteURL\": \"<string>\",\n  \"mockService\": {\n   \"enableMock\": \"<boolean>\",\n   \"runAsUser\": \"<string>\",\n   \"service\": \"<string>\"\n  },\n  \"apiDocuments\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"id\": \"<string>\",\n  \"oauth2ScopeName\": \"<string>\"\n },\n \"apiId\": \"<string>\",\n \"errorReason\": \"<string>\",\n \"responseStatus\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Get All APIs",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/apis",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"apis"
							]
						},
						"description": "Get all APIs or subset of APIs"
					},
					"response": [
						{
							"name": "Returns the list of all APIs",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis?apiIds=<string>&from=<integer>&size=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "apiIds",
											"value": "<string>"
										},
										{
											"key": "from",
											"value": "<integer>"
										},
										{
											"key": "size",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"{\\r\\n  \\\"apiResponse\\\": [\\r\\n    {\\r\\n      \\\"api\\\": {\\r\\n        \\\"apiName\\\": \\\"ChuckNorrisAPI\\\",\\r\\n        \\\"apiVersion\\\": \\\"v2\\\",\\r\\n        \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n        \\\"isActive\\\": false,\\r\\n        \\\"type\\\": \\\"REST\\\",\\r\\n        \\\"publishedPortals\\\": [],\\r\\n        \\\"systemVersion\\\": 2,\\r\\n        \\\"id\\\": \\\"46df4227-a100-486c-9580-0bf388ec6ec7\\\"\\r\\n      },\\r\\n      \\\"responseStatus\\\": \\\"SUCCESS\\\"\\r\\n    },\\r\\n    {\\r\\n      \\\"api\\\": {\\r\\n        \\\"apiName\\\": \\\"ChuckNorrisAPI\\\",\\r\\n        \\\"apiVersion\\\": \\\"1.0\\\",\\r\\n        \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n        \\\"isActive\\\": false,\\r\\n        \\\"type\\\": \\\"REST\\\",\\r\\n        \\\"publishedPortals\\\": [],\\r\\n        \\\"systemVersion\\\": 1,\\r\\n        \\\"id\\\": \\\"25fb937a-8360-41ab-8be5-987b14fe631d\\\"\\r\\n      },\\r\\n      \\\"responseStatus\\\": \\\"SUCCESS\\\",\\r\\n  \\\"teams\\\": [\\r\\n                {\\r\\n                    \\\"id\\\": \\\"Administrators\\\",\\r\\n                    \\\"name\\\": \\\"Administrators\\\",\\r\\n                    \\\"canDelete\\\": \\\"false\\\"\\r\\n                },\\r\\n                {\\r\\n                    \\\"id\\\": \\\"Default\\\",\\r\\n                    \\\"name\\\": \\\"Default\\\",\\r\\n                    \\\"canDelete\\\": \\\"true\\\"\\r\\n                }\\r\\n            ]\\r\\n      }\\r\\n  ]\\r\\n}\""
						},
						{
							"name": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis?apiIds=<string>&from=<integer>&size=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "apiIds",
											"value": "<string>"
										},
										{
											"key": "from",
											"value": "<integer>"
										},
										{
											"key": "size",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create API",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"description": "Input swagger / raml / wsdl file to be imported",
									"type": "file",
									"src": "/C:/Work/APIGatewayTrunk/tests/gatewaytests/src/test/resources/petstore.json"
								},
								{
									"key": "apiName",
									"value": "Doggie",
									"description": "Name of the API"
								},
								{
									"key": "type",
									"value": "swagger",
									"description": "Input file type (This can only be one of swagger,raml,wsdl,openapi)"
								},
								{
									"key": "apiDescription",
									"value": "description flows here",
									"description": "Description of the API"
								},
								{
									"key": "apiVersion",
									"value": "1.0",
									"description": "Version of the API"
								},
								{
									"key": "rootFileName",
									"value": "<string>",
									"description": "Name of the main file in the zip. Required only when the input file is zip format",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/apis",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"apis"
							]
						},
						"description": "This REST operation is used to create an API by importing a file, url or from scratch"
					},
					"response": [
						{
							"name": "Returns the created API object",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"value": "petstore.json",
											"description": {
												"content": "Input swagger / raml / wsdl file to be imported",
												"type": "text/plain"
											}
										},
										{
											"key": "apiName",
											"value": "Swagger Petstore",
											"description": {
												"content": "Name of the API",
												"type": "text/plain"
											}
										},
										{
											"key": "type",
											"value": "swagger",
											"description": {
												"content": "Input file type (This can only be one of swagger,raml,wsdl,openapi)",
												"type": "text/plain"
											}
										},
										{
											"key": "apiDescription",
											"value": "This is a sample server Petstore server",
											"description": {
												"content": "Description of the API",
												"type": "text/plain"
											}
										},
										{
											"key": "apiVersion",
											"value": "V1",
											"description": {
												"content": "Version of the API",
												"type": "text/plain"
											}
										},
										{
											"key": "rootFileName",
											"value": "mainFile.wsdl",
											"description": {
												"content": "Name of the main file in the zip. Required only when the input file is zip format",
												"type": "text/plain"
											}
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/apis",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"{\\r\\n    \\\"apiResponse\\\": {\\r\\n        \\\"api\\\": {\\r\\n            \\\"apiDefinition\\\": {\\r\\n                \\\"type\\\": \\\"rest\\\",\\r\\n                \\\"info\\\": {\\r\\n                    \\\"description\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n                    \\\"version\\\": \\\"1.0\\\",\\r\\n                    \\\"title\\\": \\\"ChuckNorrisAPI\\\"\\r\\n                },\\r\\n                \\\"host\\\": \\\"api.chucknorris.io\\\",\\r\\n                \\\"basePath\\\": \\\"/jokes\\\",\\r\\n                \\\"schemes\\\": [\\r\\n                    \\\"https\\\"\\r\\n                ],\\r\\n                \\\"security\\\": [],\\r\\n                \\\"paths\\\": {\\r\\n                    \\\"/random\\\": {\\r\\n                        \\\"get\\\": {\\r\\n                            \\\"summary\\\": \\\"GET\\\",\\r\\n                            \\\"description\\\": \\\"\\\",\\r\\n                            \\\"operationId\\\": \\\"GET\\\",\\r\\n                            \\\"produces\\\": [\\r\\n                                \\\"application/json\\\"\\r\\n                            ],\\r\\n                            \\\"responses\\\": {},\\r\\n                            \\\"enabled\\\": true\\r\\n                        },\\r\\n                        \\\"enabled\\\": true\\r\\n                    }\\r\\n                },\\r\\n                \\\"securityDefinitions\\\": {},\\r\\n                \\\"definitions\\\": {},\\r\\n                \\\"baseUriParameters\\\": [],\\r\\n                \\\"externalDocs\\\": [],\\r\\n                \\\"servers\\\": [\\r\\n                    {\\r\\n                        \\\"url\\\": \\\"https://api.chucknorris.io/jokes\\\"\\r\\n                    }\\r\\n                ],\\r\\n                \\\"components\\\": {\\r\\n                    \\\"schemas\\\": {}\\r\\n                }\\r\\n            },\\r\\n            \\\"nativeEndpoint\\\": [\\r\\n                {\\r\\n                    \\\"passSecurityHeaders\\\": true,\\r\\n                    \\\"uri\\\": \\\"https://api.chucknorris.io/jokes\\\",\\r\\n                    \\\"connectionTimeoutDuration\\\": 0,\\r\\n                    \\\"alias\\\": false\\r\\n                }\\r\\n            ],\\r\\n            \\\"apiName\\\": \\\"ChuckNorris\\\",\\r\\n            \\\"apiVersion\\\": \\\"1.0\\\",\\r\\n            \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n            \\\"maturityState\\\": \\\"Beta\\\",\\r\\n            \\\"isActive\\\": false,\\r\\n            \\\"type\\\": \\\"REST\\\",\\r\\n            \\\"owner\\\": \\\"Administrator\\\",\\r\\n            \\\"policies\\\": [\\r\\n                \\\"08afbfa9-78e1-4c23-bb19-c0012464047e\\\"\\r\\n            ],\\r\\n            \\\"scopes\\\": [],\\r\\n            \\\"publishedPortals\\\": [],\\r\\n            \\\"creationDate\\\": \\\"2018-09-03 11:56:21 GMT\\\",\\r\\n            \\\"systemVersion\\\": 1,\\r\\n            \\\"id\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n        },\\r\\n        \\\"responseStatus\\\": \\\"SUCCESS\\\",\\r\\n        \\\"versions\\\": [\\r\\n            {\\r\\n                \\\"versionNumber\\\": \\\"1.0\\\",\\r\\n                \\\"apiId\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n            }\\r\\n        ],\\r\\n        \\\"teams\\\": [\\r\\n            {\\r\\n                \\\"id\\\": \\\"Administrators\\\",\\r\\n                \\\"name\\\": \\\"Administrators\\\",\\r\\n                \\\"canDelete\\\": \\\"false\\\"\\r\\n            },\\r\\n            {\\r\\n                \\\"id\\\": \\\"Default\\\",\\r\\n                \\\"name\\\": \\\"Default\\\",\\r\\n                \\\"canDelete\\\": \\\"true\\\"\\r\\n            }\\r\\n        ]   }\\r\\n}\""
						},
						{
							"name": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"value": "petstore.json",
											"description": {
												"content": "Input swagger / raml / wsdl file to be imported",
												"type": "text/plain"
											}
										},
										{
											"key": "apiName",
											"value": "Swagger Petstore",
											"description": {
												"content": "Name of the API",
												"type": "text/plain"
											}
										},
										{
											"key": "type",
											"value": "swagger",
											"description": {
												"content": "Input file type (This can only be one of swagger,raml,wsdl,openapi)",
												"type": "text/plain"
											}
										},
										{
											"key": "apiDescription",
											"value": "This is a sample server Petstore server",
											"description": {
												"content": "Description of the API",
												"type": "text/plain"
											}
										},
										{
											"key": "apiVersion",
											"value": "V1",
											"description": {
												"content": "Version of the API",
												"type": "text/plain"
											}
										},
										{
											"key": "rootFileName",
											"value": "mainFile.wsdl",
											"description": {
												"content": "Name of the main file in the zip. Required only when the input file is zip format",
												"type": "text/plain"
											}
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/apis",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "This status code shows when the user missed the mandatory fields like type, file/url/apiDefinition in the request or provide a invalid request body",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"value": "petstore.json",
											"description": {
												"content": "Input swagger / raml / wsdl file to be imported",
												"type": "text/plain"
											}
										},
										{
											"key": "apiName",
											"value": "Swagger Petstore",
											"description": {
												"content": "Name of the API",
												"type": "text/plain"
											}
										},
										{
											"key": "type",
											"value": "swagger",
											"description": {
												"content": "Input file type (This can only be one of swagger,raml,wsdl,openapi)",
												"type": "text/plain"
											}
										},
										{
											"key": "apiDescription",
											"value": "This is a sample server Petstore server",
											"description": {
												"content": "Description of the API",
												"type": "text/plain"
											}
										},
										{
											"key": "apiVersion",
											"value": "V1",
											"description": {
												"content": "Version of the API",
												"type": "text/plain"
											}
										},
										{
											"key": "rootFileName",
											"value": "mainFile.wsdl",
											"description": {
												"content": "Name of the main file in the zip. Required only when the input file is zip format",
												"type": "text/plain"
											}
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/apis",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Update API",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"apiDefinition\": {\n        \"info\": {\n            \"description\": \"description flows here\",\n            \"version\": \"1.0\",\n            \"title\": \"Swagger Petstore\",\n            \"termsOfService\": \"http://swagger.io/terms/\",\n            \"contact\": {\n                \"email\": \"apiteam@swagger.io\"\n            },\n            \"license\": {\n                \"name\": \"Apache 2.0\",\n                \"url\": \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n            }\n        },\n        \"host\": \"petstore.swagger.io\",\n        \"basePath\": \"/v2\",\n        \"tags\": [\n            {\n                \"name\": \"pet\",\n                \"description\": \"Everything about your Pets\",\n                \"externalDocs\": {\n                    \"description\": \"Find out more\",\n                    \"url\": \"http://swagger.io\"\n                }\n            },\n            {\n                \"name\": \"store\",\n                \"description\": \"Access to Petstore orders\"\n            },\n            {\n                \"name\": \"user\",\n                \"description\": \"Operations about user\",\n                \"externalDocs\": {\n                    \"description\": \"Find out more about our store\",\n                    \"url\": \"http://swagger.io\"\n                }\n            }\n        ],\n        \"schemes\": [\n            \"https\",\n            \"http\"\n        ],\n        \"security\": [],\n        \"paths\": {\n            \"/pet\": {\n                \"put\": {\n                    \"tags\": [\n                        \"pet\"\n                    ],\n                    \"summary\": \"Update an existing pet\",\n                    \"description\": \"\",\n                    \"operationId\": \"updatePet\",\n                    \"consumes\": [\n                        \"application/json\",\n                        \"application/xml\"\n                    ],\n                    \"produces\": [\n                        \"application/json\",\n                        \"application/xml\"\n                    ],\n                    \"parameters\": [],\n                    \"responses\": {\n                        \"400\": {\n                            \"description\": \"Invalid ID supplied\"\n                        },\n                        \"404\": {\n                            \"description\": \"Pet not found\"\n                        },\n                        \"405\": {\n                            \"description\": \"Validation exception\"\n                        }\n                    },\n                    \"security\": [\n                        {\n                            \"petstore_auth\": [\n                                \"write:pets\",\n                                \"read:pets\"\n                            ]\n                        }\n                    ],\n                    \"enabled\": true,\n                    \"requestBody\": {\n                        \"description\": \"Pet object that needs to be added to the store\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Pet\"\n                                }\n                            },\n                            \"application/xml\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Pet\"\n                                }\n                            }\n                        },\n                        \"required\": true\n                    }\n                },\n                \"post\": {\n                    \"tags\": [\n                        \"pet\"\n                    ],\n                    \"summary\": \"Add a new pet to the store\",\n                    \"description\": \"\",\n                    \"operationId\": \"addPet\",\n                    \"consumes\": [\n                        \"application/json\",\n                        \"application/xml\"\n                    ],\n                    \"produces\": [\n                        \"application/json\",\n                        \"application/xml\"\n                    ],\n                    \"parameters\": [],\n                    \"responses\": {\n                        \"405\": {\n                            \"description\": \"Invalid input\"\n                        }\n                    },\n                    \"security\": [\n                        {\n                            \"petstore_auth\": [\n                                \"write:pets\",\n                                \"read:pets\"\n                            ]\n                        }\n                    ],\n                    \"enabled\": true,\n                    \"requestBody\": {\n                        \"description\": \"Pet object that needs to be added to the store\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Pet\"\n                                }\n                            },\n                            \"application/xml\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Pet\"\n                                }\n                            }\n                        },\n                        \"required\": true\n                    }\n                },\n                \"parameters\": [],\n                \"enabled\": true\n            },\n            \"/pet/findByStatus\": {\n                \"get\": {\n                    \"tags\": [\n                        \"pet\"\n                    ],\n                    \"summary\": \"Finds Pets by status\",\n                    \"description\": \"Multiple status values can be provided with comma separated strings\",\n                    \"operationId\": \"findPetsByStatus\",\n                    \"produces\": [\n                        \"application/json\",\n                        \"application/xml\"\n                    ],\n                    \"parameters\": [\n                        {\n                            \"description\": \"Status values that need to be considered for filter\",\n                            \"in\": \"query\",\n                            \"name\": \"status\",\n                            \"parameterSchema\": {\n                                \"description\": \"Status values that need to be considered for filter\",\n                                \"items\": {\n                                    \"default\": \"available\",\n                                    \"enum\": [\n                                        \"available\",\n                                        \"pending\",\n                                        \"sold\"\n                                    ],\n                                    \"type\": \"string\"\n                                },\n                                \"readOnly\": false,\n                                \"type\": \"array\"\n                            },\n                            \"required\": true\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"successful operation\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Pet\"\n                                        }\n                                    }\n                                },\n                                \"application/xml\": {\n                                    \"schema\": {\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Pet\"\n                                        }\n                                    }\n                                }\n                            }\n                        },\n                        \"400\": {\n                            \"description\": \"Invalid status value\"\n                        }\n                    },\n                    \"security\": [\n                        {\n                            \"petstore_auth\": [\n                                \"write:pets\",\n                                \"read:pets\"\n                            ]\n                        }\n                    ],\n                    \"enabled\": true\n                },\n                \"parameters\": [],\n                \"enabled\": true\n            },\n            \"/pet/findByTags\": {\n                \"get\": {\n                    \"tags\": [\n                        \"pet\"\n                    ],\n                    \"summary\": \"Finds Pets by tags\",\n                    \"description\": \"Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\",\n                    \"operationId\": \"findPetsByTags\",\n                    \"produces\": [\n                        \"application/json\",\n                        \"application/xml\"\n                    ],\n                    \"parameters\": [\n                        {\n                            \"description\": \"Tags to filter by\",\n                            \"in\": \"query\",\n                            \"name\": \"tags\",\n                            \"parameterSchema\": {\n                                \"description\": \"Tags to filter by\",\n                                \"items\": {\n                                    \"type\": \"string\"\n                                },\n                                \"readOnly\": false,\n                                \"type\": \"array\"\n                            },\n                            \"required\": true\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"successful operation\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Pet\"\n                                        }\n                                    }\n                                },\n                                \"application/xml\": {\n                                    \"schema\": {\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"$ref\": \"#/components/schemas/Pet\"\n                                        }\n                                    }\n                                }\n                            }\n                        },\n                        \"400\": {\n                            \"description\": \"Invalid tag value\"\n                        }\n                    },\n                    \"security\": [\n                        {\n                            \"petstore_auth\": [\n                                \"write:pets\",\n                                \"read:pets\"\n                            ]\n                        }\n                    ],\n                    \"deprecated\": true,\n                    \"enabled\": true\n                },\n                \"parameters\": [],\n                \"enabled\": true\n            },\n            \"/pet/{petId}\": {\n                \"get\": {\n                    \"tags\": [\n                        \"pet\"\n                    ],\n                    \"summary\": \"Find pet by ID\",\n                    \"description\": \"Returns a single pet\",\n                    \"operationId\": \"getPetById\",\n                    \"produces\": [\n                        \"application/json\",\n                        \"application/xml\"\n                    ],\n                    \"parameters\": [\n                        {\n                            \"description\": \"ID of pet to return\",\n                            \"in\": \"path\",\n                            \"name\": \"petId\",\n                            \"parameterSchema\": {\n                                \"description\": \"ID of pet to return\",\n                                \"format\": \"int64\",\n                                \"readOnly\": false,\n                                \"type\": \"integer\"\n                            },\n                            \"required\": true\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"successful operation\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/Pet\"\n                                    }\n                                },\n                                \"application/xml\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/Pet\"\n                                    }\n                                }\n                            }\n                        },\n                        \"400\": {\n                            \"description\": \"Invalid ID supplied\"\n                        },\n                        \"404\": {\n                            \"description\": \"Pet not found\"\n                        }\n                    },\n                    \"security\": [\n                        {\n                            \"api_key\": []\n                        }\n                    ],\n                    \"enabled\": true\n                },\n                \"post\": {\n                    \"tags\": [\n                        \"pet\"\n                    ],\n                    \"summary\": \"Updates a pet in the store with form data\",\n                    \"description\": \"\",\n                    \"operationId\": \"updatePetWithForm\",\n                    \"consumes\": [\n                        \"application/x-www-form-urlencoded\"\n                    ],\n                    \"produces\": [\n                        \"application/json\",\n                        \"application/xml\"\n                    ],\n                    \"parameters\": [\n                        {\n                            \"description\": \"ID of pet that needs to be updated\",\n                            \"in\": \"path\",\n                            \"name\": \"petId\",\n                            \"parameterSchema\": {\n                                \"description\": \"ID of pet that needs to be updated\",\n                                \"format\": \"int64\",\n                                \"readOnly\": false,\n                                \"type\": \"integer\"\n                            },\n                            \"required\": true\n                        }\n                    ],\n                    \"responses\": {\n                        \"405\": {\n                            \"description\": \"Invalid input\"\n                        }\n                    },\n                    \"security\": [\n                        {\n                            \"petstore_auth\": [\n                                \"write:pets\",\n                                \"read:pets\"\n                            ]\n                        }\n                    ],\n                    \"enabled\": true,\n                    \"requestBody\": {\n                        \"content\": {\n                            \"application/x-www-form-urlencoded\": {\n                                \"schema\": {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"name\": {\n                                            \"type\": \"string\",\n                                            \"description\": \"Updated name of the pet\",\n                                            \"readOnly\": false\n                                        },\n                                        \"status\": {\n                                            \"type\": \"string\",\n                                            \"description\": \"Updated status of the pet\",\n                                            \"readOnly\": false\n                                        }\n                                    }\n                                }\n                            }\n                        },\n                        \"required\": true\n                    }\n                },\n                \"delete\": {\n                    \"tags\": [\n                        \"pet\"\n                    ],\n                    \"summary\": \"Deletes a pet\",\n                    \"description\": \"\",\n                    \"operationId\": \"deletePet\",\n                    \"produces\": [\n                        \"application/json\",\n                        \"application/xml\"\n                    ],\n                    \"parameters\": [\n                        {\n                            \"in\": \"header\",\n                            \"name\": \"api_key\",\n                            \"parameterSchema\": {\n                                \"readOnly\": false,\n                                \"type\": \"string\"\n                            },\n                            \"required\": false\n                        },\n                        {\n                            \"description\": \"Pet id to delete\",\n                            \"in\": \"path\",\n                            \"name\": \"petId\",\n                            \"parameterSchema\": {\n                                \"description\": \"Pet id to delete\",\n                                \"format\": \"int64\",\n                                \"readOnly\": false,\n                                \"type\": \"integer\"\n                            },\n                            \"required\": true\n                        }\n                    ],\n                    \"responses\": {\n                        \"400\": {\n                            \"description\": \"Invalid ID supplied\"\n                        },\n                        \"404\": {\n                            \"description\": \"Pet not found\"\n                        }\n                    },\n                    \"security\": [\n                        {\n                            \"petstore_auth\": [\n                                \"write:pets\",\n                                \"read:pets\"\n                            ]\n                        }\n                    ],\n                    \"enabled\": true\n                },\n                \"parameters\": [],\n                \"enabled\": true\n            },\n            \"/pet/{petId}/uploadImage\": {\n                \"post\": {\n                    \"tags\": [\n                        \"pet\"\n                    ],\n                    \"summary\": \"uploads an image\",\n                    \"description\": \"\",\n                    \"operationId\": \"uploadFile\",\n                    \"consumes\": [\n                        \"multipart/form-data\"\n                    ],\n                    \"produces\": [\n                        \"application/json\"\n                    ],\n                    \"parameters\": [\n                        {\n                            \"description\": \"ID of pet to update\",\n                            \"in\": \"path\",\n                            \"name\": \"petId\",\n                            \"parameterSchema\": {\n                                \"description\": \"ID of pet to update\",\n                                \"format\": \"int64\",\n                                \"readOnly\": false,\n                                \"type\": \"integer\"\n                            },\n                            \"required\": true\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"successful operation\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/ApiResponse\"\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"security\": [\n                        {\n                            \"petstore_auth\": [\n                                \"write:pets\",\n                                \"read:pets\"\n                            ]\n                        }\n                    ],\n                    \"enabled\": true,\n                    \"requestBody\": {\n                        \"content\": {\n                            \"multipart/form-data\": {\n                                \"schema\": {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"additionalMetadata\": {\n                                            \"type\": \"string\",\n                                            \"description\": \"Additional data to pass to server\",\n                                            \"readOnly\": false\n                                        },\n                                        \"file\": {\n                                            \"type\": \"string\",\n                                            \"description\": \"file to upload\",\n                                            \"format\": \"binary\",\n                                            \"readOnly\": false\n                                        }\n                                    }\n                                }\n                            }\n                        },\n                        \"required\": true\n                    }\n                },\n                \"parameters\": [],\n                \"enabled\": true\n            },\n            \"/store/inventory\": {\n                \"get\": {\n                    \"tags\": [\n                        \"store\"\n                    ],\n                    \"summary\": \"Returns pet inventories by status\",\n                    \"description\": \"Returns a map of status codes to quantities\",\n                    \"operationId\": \"getInventory\",\n                    \"produces\": [\n                        \"application/json\"\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"successful operation\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"type\": \"object\",\n                                        \"additionalProperties\": {\n                                            \"type\": \"integer\",\n                                            \"format\": \"int32\"\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"security\": [\n                        {\n                            \"api_key\": []\n                        }\n                    ],\n                    \"enabled\": true\n                },\n                \"parameters\": [],\n                \"enabled\": true\n            },\n            \"/store/order\": {\n                \"post\": {\n                    \"tags\": [\n                        \"store\"\n                    ],\n                    \"summary\": \"Place an order for a pet\",\n                    \"description\": \"\",\n                    \"operationId\": \"placeOrder\",\n                    \"consumes\": [\n                        \"application/json\"\n                    ],\n                    \"produces\": [\n                        \"application/json\",\n                        \"application/xml\"\n                    ],\n                    \"parameters\": [],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"successful operation\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/Order\"\n                                    }\n                                },\n                                \"application/xml\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/Order\"\n                                    }\n                                }\n                            }\n                        },\n                        \"400\": {\n                            \"description\": \"Invalid Order\"\n                        }\n                    },\n                    \"enabled\": true,\n                    \"requestBody\": {\n                        \"description\": \"order placed for purchasing the pet\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Order\"\n                                }\n                            }\n                        },\n                        \"required\": true\n                    }\n                },\n                \"parameters\": [],\n                \"enabled\": true\n            },\n            \"/store/order/{orderId}\": {\n                \"get\": {\n                    \"tags\": [\n                        \"store\"\n                    ],\n                    \"summary\": \"Find purchase order by ID\",\n                    \"description\": \"For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\",\n                    \"operationId\": \"getOrderById\",\n                    \"produces\": [\n                        \"application/json\",\n                        \"application/xml\"\n                    ],\n                    \"parameters\": [\n                        {\n                            \"description\": \"ID of pet that needs to be fetched\",\n                            \"in\": \"path\",\n                            \"name\": \"orderId\",\n                            \"parameterSchema\": {\n                                \"description\": \"ID of pet that needs to be fetched\",\n                                \"format\": \"int64\",\n                                \"maximum\": 10,\n                                \"minimum\": 1,\n                                \"readOnly\": false,\n                                \"type\": \"integer\"\n                            },\n                            \"required\": true\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"successful operation\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/Order\"\n                                    }\n                                },\n                                \"application/xml\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/Order\"\n                                    }\n                                }\n                            }\n                        },\n                        \"400\": {\n                            \"description\": \"Invalid ID supplied\"\n                        },\n                        \"404\": {\n                            \"description\": \"Order not found\"\n                        }\n                    },\n                    \"enabled\": true\n                },\n                \"delete\": {\n                    \"tags\": [\n                        \"store\"\n                    ],\n                    \"summary\": \"Delete purchase order by ID\",\n                    \"description\": \"For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\",\n                    \"operationId\": \"deleteOrder\",\n                    \"produces\": [\n                        \"application/json\",\n                        \"application/xml\"\n                    ],\n                    \"parameters\": [\n                        {\n                            \"description\": \"ID of the order that needs to be deleted\",\n                            \"in\": \"path\",\n                            \"name\": \"orderId\",\n                            \"parameterSchema\": {\n                                \"description\": \"ID of the order that needs to be deleted\",\n                                \"format\": \"int64\",\n                                \"minimum\": 1,\n                                \"readOnly\": false,\n                                \"type\": \"integer\"\n                            },\n                            \"required\": true\n                        }\n                    ],\n                    \"responses\": {\n                        \"400\": {\n                            \"description\": \"Invalid ID supplied\"\n                        },\n                        \"404\": {\n                            \"description\": \"Order not found\"\n                        }\n                    },\n                    \"enabled\": true\n                },\n                \"parameters\": [],\n                \"enabled\": true\n            },\n            \"/user\": {\n                \"post\": {\n                    \"tags\": [\n                        \"user\"\n                    ],\n                    \"summary\": \"Create user\",\n                    \"description\": \"This can only be done by the logged in user.\",\n                    \"operationId\": \"createUser\",\n                    \"consumes\": [\n                        \"application/json\"\n                    ],\n                    \"produces\": [\n                        \"application/json\",\n                        \"application/xml\"\n                    ],\n                    \"parameters\": [],\n                    \"responses\": {\n                        \"default\": {\n                            \"description\": \"successful operation\"\n                        }\n                    },\n                    \"enabled\": true,\n                    \"requestBody\": {\n                        \"description\": \"Created user object\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/User\"\n                                }\n                            }\n                        },\n                        \"required\": true\n                    }\n                },\n                \"parameters\": [],\n                \"enabled\": true\n            },\n            \"/user/createWithArray\": {\n                \"post\": {\n                    \"tags\": [\n                        \"user\"\n                    ],\n                    \"summary\": \"Creates list of users with given input array\",\n                    \"description\": \"\",\n                    \"operationId\": \"createUsersWithArrayInput\",\n                    \"consumes\": [\n                        \"application/json\"\n                    ],\n                    \"produces\": [\n                        \"application/json\",\n                        \"application/xml\"\n                    ],\n                    \"parameters\": [],\n                    \"responses\": {\n                        \"default\": {\n                            \"description\": \"successful operation\"\n                        }\n                    },\n                    \"enabled\": true,\n                    \"requestBody\": {\n                        \"description\": \"List of user object\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/User\"\n                                    }\n                                }\n                            }\n                        },\n                        \"required\": true\n                    }\n                },\n                \"parameters\": [],\n                \"enabled\": true\n            },\n            \"/user/createWithList\": {\n                \"post\": {\n                    \"tags\": [\n                        \"user\"\n                    ],\n                    \"summary\": \"Creates list of users with given input array\",\n                    \"description\": \"\",\n                    \"operationId\": \"createUsersWithListInput\",\n                    \"consumes\": [\n                        \"application/json\"\n                    ],\n                    \"produces\": [\n                        \"application/json\",\n                        \"application/xml\"\n                    ],\n                    \"parameters\": [],\n                    \"responses\": {\n                        \"default\": {\n                            \"description\": \"successful operation\"\n                        }\n                    },\n                    \"enabled\": true,\n                    \"requestBody\": {\n                        \"description\": \"List of user object\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/User\"\n                                    }\n                                }\n                            }\n                        },\n                        \"required\": true\n                    }\n                },\n                \"parameters\": [],\n                \"enabled\": true\n            },\n            \"/user/login\": {\n                \"get\": {\n                    \"tags\": [\n                        \"user\"\n                    ],\n                    \"summary\": \"Logs user into the system\",\n                    \"description\": \"\",\n                    \"operationId\": \"loginUser\",\n                    \"produces\": [\n                        \"application/json\",\n                        \"application/xml\"\n                    ],\n                    \"parameters\": [\n                        {\n                            \"description\": \"The user name for login\",\n                            \"in\": \"query\",\n                            \"name\": \"username\",\n                            \"parameterSchema\": {\n                                \"description\": \"The user name for login\",\n                                \"readOnly\": false,\n                                \"type\": \"string\"\n                            },\n                            \"required\": true\n                        },\n                        {\n                            \"description\": \"The password for login in clear text\",\n                            \"in\": \"query\",\n                            \"name\": \"password\",\n                            \"parameterSchema\": {\n                                \"description\": \"The password for login in clear text\",\n                                \"readOnly\": false,\n                                \"type\": \"string\"\n                            },\n                            \"required\": true\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"successful operation\",\n                            \"headersV3\": {\n                                \"X-Expires-After\": {\n                                    \"in\": \"header\",\n                                    \"description\": \"date in UTC when token expires\",\n                                    \"required\": false,\n                                    \"parameterSchema\": {\n                                        \"type\": \"string\",\n                                        \"format\": \"date-time\"\n                                    }\n                                },\n                                \"X-Rate-Limit\": {\n                                    \"in\": \"header\",\n                                    \"description\": \"calls per hour allowed by the user\",\n                                    \"required\": false,\n                                    \"parameterSchema\": {\n                                        \"type\": \"integer\",\n                                        \"format\": \"int32\"\n                                    }\n                                }\n                            },\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"type\": \"string\"\n                                    }\n                                },\n                                \"application/xml\": {\n                                    \"schema\": {\n                                        \"type\": \"string\"\n                                    }\n                                }\n                            }\n                        },\n                        \"400\": {\n                            \"description\": \"Invalid username/password supplied\"\n                        }\n                    },\n                    \"enabled\": true\n                },\n                \"parameters\": [],\n                \"enabled\": true\n            },\n            \"/user/logout\": {\n                \"get\": {\n                    \"tags\": [\n                        \"user\"\n                    ],\n                    \"summary\": \"Logs out current logged in user session\",\n                    \"description\": \"\",\n                    \"operationId\": \"logoutUser\",\n                    \"produces\": [\n                        \"application/json\",\n                        \"application/xml\"\n                    ],\n                    \"responses\": {\n                        \"default\": {\n                            \"description\": \"successful operation\"\n                        }\n                    },\n                    \"enabled\": true\n                },\n                \"parameters\": [],\n                \"enabled\": true\n            },\n            \"/user/{username}\": {\n                \"get\": {\n                    \"tags\": [\n                        \"user\"\n                    ],\n                    \"summary\": \"Get user by user name\",\n                    \"description\": \"\",\n                    \"operationId\": \"getUserByName\",\n                    \"produces\": [\n                        \"application/json\",\n                        \"application/xml\"\n                    ],\n                    \"parameters\": [\n                        {\n                            \"description\": \"The name that needs to be fetched. Use user1 for testing. \",\n                            \"in\": \"path\",\n                            \"name\": \"username\",\n                            \"parameterSchema\": {\n                                \"description\": \"The name that needs to be fetched. Use user1 for testing. \",\n                                \"readOnly\": false,\n                                \"type\": \"string\"\n                            },\n                            \"required\": true\n                        }\n                    ],\n                    \"responses\": {\n                        \"200\": {\n                            \"description\": \"successful operation\",\n                            \"content\": {\n                                \"application/json\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/User\"\n                                    }\n                                },\n                                \"application/xml\": {\n                                    \"schema\": {\n                                        \"$ref\": \"#/components/schemas/User\"\n                                    }\n                                }\n                            }\n                        },\n                        \"400\": {\n                            \"description\": \"Invalid username supplied\"\n                        },\n                        \"404\": {\n                            \"description\": \"User not found\"\n                        }\n                    },\n                    \"enabled\": true\n                },\n                \"put\": {\n                    \"tags\": [\n                        \"user\"\n                    ],\n                    \"summary\": \"Updated user\",\n                    \"description\": \"This can only be done by the logged in user.\",\n                    \"operationId\": \"updateUser\",\n                    \"consumes\": [\n                        \"application/json\"\n                    ],\n                    \"produces\": [\n                        \"application/json\",\n                        \"application/xml\"\n                    ],\n                    \"parameters\": [\n                        {\n                            \"description\": \"name that need to be updated\",\n                            \"in\": \"path\",\n                            \"name\": \"username\",\n                            \"parameterSchema\": {\n                                \"description\": \"name that need to be updated\",\n                                \"readOnly\": false,\n                                \"type\": \"string\"\n                            },\n                            \"required\": true\n                        }\n                    ],\n                    \"responses\": {\n                        \"400\": {\n                            \"description\": \"Invalid user supplied\"\n                        },\n                        \"404\": {\n                            \"description\": \"User not found\"\n                        }\n                    },\n                    \"enabled\": true,\n                    \"requestBody\": {\n                        \"description\": \"Updated user object\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/User\"\n                                }\n                            }\n                        },\n                        \"required\": true\n                    }\n                },\n                \"delete\": {\n                    \"tags\": [\n                        \"user\"\n                    ],\n                    \"summary\": \"Delete user\",\n                    \"description\": \"This can only be done by the logged in user.\",\n                    \"operationId\": \"deleteUser\",\n                    \"produces\": [\n                        \"application/json\",\n                        \"application/xml\"\n                    ],\n                    \"parameters\": [\n                        {\n                            \"description\": \"The name that needs to be deleted\",\n                            \"in\": \"path\",\n                            \"name\": \"username\",\n                            \"parameterSchema\": {\n                                \"description\": \"The name that needs to be deleted\",\n                                \"readOnly\": false,\n                                \"type\": \"string\"\n                            },\n                            \"required\": true\n                        }\n                    ],\n                    \"responses\": {\n                        \"400\": {\n                            \"description\": \"Invalid username supplied\"\n                        },\n                        \"404\": {\n                            \"description\": \"User not found\"\n                        }\n                    },\n                    \"enabled\": true\n                },\n                \"parameters\": [],\n                \"enabled\": true\n            }\n        },\n        \"securityDefinitions\": {\n            \"api_key\": {\n                \"in\": \"header\",\n                \"name\": \"api_key\",\n                \"type\": \"apiKey\"\n            },\n            \"petstore_auth\": {\n                \"authorizationUrl\": \"https://petstore.swagger.io/oauth/authorize\",\n                \"flow\": \"implicit\",\n                \"scopes\": {\n                    \"read:pets\": \"read your pets\",\n                    \"write:pets\": \"modify pets in your account\"\n                },\n                \"type\": \"oauth2\"\n            }\n        },\n        \"definitions\": {},\n        \"baseUriParameters\": [],\n        \"externalDocs\": [\n            {\n                \"description\": \"Find out more about Swagger\",\n                \"url\": \"http://swagger.io\"\n            }\n        ],\n        \"servers\": [\n            {\n                \"url\": \"https://petstore.swagger.io/v2\"\n            },\n            {\n                \"url\": \"http://petstore.swagger.io/v2\"\n            }\n        ],\n        \"components\": {\n            \"schemas\": {\n                \"ApiResponse\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"code\": {\n                            \"type\": \"integer\",\n                            \"format\": \"int32\"\n                        },\n                        \"message\": {\n                            \"type\": \"string\"\n                        },\n                        \"type\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                },\n                \"Category\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"id\": {\n                            \"type\": \"integer\",\n                            \"format\": \"int64\"\n                        },\n                        \"name\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"xml\": {\n                        \"name\": \"Category\"\n                    }\n                },\n                \"Order\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"complete\": {\n                            \"type\": \"boolean\"\n                        },\n                        \"id\": {\n                            \"type\": \"integer\",\n                            \"format\": \"int64\"\n                        },\n                        \"petId\": {\n                            \"type\": \"integer\",\n                            \"format\": \"int64\"\n                        },\n                        \"quantity\": {\n                            \"type\": \"integer\",\n                            \"format\": \"int32\"\n                        },\n                        \"shipDate\": {\n                            \"type\": \"string\",\n                            \"format\": \"date-time\"\n                        },\n                        \"status\": {\n                            \"type\": \"string\",\n                            \"description\": \"Order Status\",\n                            \"enum\": [\n                                \"placed\",\n                                \"approved\",\n                                \"delivered\"\n                            ]\n                        }\n                    },\n                    \"xml\": {\n                        \"name\": \"Order\"\n                    }\n                },\n                \"Pet\": {\n                    \"required\": [\n                        \"photoUrls\",\n                        \"name\"\n                    ],\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"category\": {\n                            \"$ref\": \"#/components/schemas/Category\"\n                        },\n                        \"id\": {\n                            \"type\": \"integer\",\n                            \"format\": \"int64\"\n                        },\n                        \"name\": {\n                            \"type\": \"string\",\n                            \"example\": \"doggie\"\n                        },\n                        \"photoUrls\": {\n                            \"type\": \"array\",\n                            \"xml\": {\n                                \"wrapped\": true\n                            },\n                            \"items\": {\n                                \"type\": \"string\",\n                                \"xml\": {\n                                    \"name\": \"photoUrl\"\n                                }\n                            }\n                        },\n                        \"status\": {\n                            \"type\": \"string\",\n                            \"description\": \"pet status in the store\",\n                            \"enum\": [\n                                \"available\",\n                                \"pending\",\n                                \"sold\"\n                            ]\n                        },\n                        \"tags\": {\n                            \"type\": \"array\",\n                            \"xml\": {\n                                \"wrapped\": true\n                            },\n                            \"items\": {\n                                \"$ref\": \"#/components/schemas/Tag\",\n                                \"xml\": {\n                                    \"name\": \"tag\"\n                                }\n                            }\n                        }\n                    },\n                    \"xml\": {\n                        \"name\": \"Pet\"\n                    }\n                },\n                \"Tag\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"id\": {\n                            \"type\": \"integer\",\n                            \"format\": \"int64\"\n                        },\n                        \"name\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"xml\": {\n                        \"name\": \"Tag\"\n                    }\n                },\n                \"User\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"email\": {\n                            \"type\": \"string\"\n                        },\n                        \"firstName\": {\n                            \"type\": \"string\"\n                        },\n                        \"id\": {\n                            \"type\": \"integer\",\n                            \"format\": \"int64\"\n                        },\n                        \"lastName\": {\n                            \"type\": \"string\"\n                        },\n                        \"password\": {\n                            \"type\": \"string\"\n                        },\n                        \"phone\": {\n                            \"type\": \"string\"\n                        },\n                        \"userStatus\": {\n                            \"type\": \"integer\",\n                            \"description\": \"User Status\",\n                            \"format\": \"int32\"\n                        },\n                        \"username\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"xml\": {\n                        \"name\": \"User\"\n                    }\n                }\n            }\n        },\n        \"type\": \"rest\"\n    },\n    \"nativeEndpoint\": [\n        {\n            \"passSecurityHeaders\": true,\n            \"uri\": \"http://petstore.swagger.io/v2\",\n            \"connectionTimeoutDuration\": 0,\n            \"alias\": false\n        },\n        {\n            \"passSecurityHeaders\": true,\n            \"uri\": \"https://petstore.swagger.io/v2\",\n            \"connectionTimeoutDuration\": 0,\n            \"alias\": false\n        }\n    ],\n    \"apiName\": \"Petstore\",\n    \"apiVersion\": \"1.0\",\n    \"apiDescription\": \"description flows here\",\n    \"maturityState\": \"Beta\",\n    \"isActive\": true,\n    \"type\": \"REST\",\n    \"owner\": \"Administrator\",\n    \"policies\": [\n        \"7a64f49d-4651-4140-aa78-66920cc44864\"\n    ],\n    \"scopes\": [],\n    \"publishedPortals\": [],\n    \"creationDate\": \"2020-04-28 05:09:56 GMT\",\n    \"systemVersion\": 1,\n    \"id\": \"befd30d2-cff8-4c1a-be0c-5ee3534e74ef\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/apis",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"apis"
							]
						},
						"description": "Get the API details by ID using our rest service and update the api with the needed changes."
					},
					"response": [
						{
							"name": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"value": "petstore.json",
											"description": {
												"content": "Input swagger / raml / wsdl file to be imported",
												"type": "text/plain"
											}
										},
										{
											"key": "apiName",
											"value": "Swagger Petstore",
											"description": {
												"content": "Name of the API",
												"type": "text/plain"
											}
										},
										{
											"key": "type",
											"value": "swagger",
											"description": {
												"content": "Input file type (This can only be one of swagger,raml,wsdl,openapi)",
												"type": "text/plain"
											}
										},
										{
											"key": "apiDescription",
											"value": "This is a sample server Petstore server",
											"description": {
												"content": "Description of the API",
												"type": "text/plain"
											}
										},
										{
											"key": "apiVersion",
											"value": "V1",
											"description": {
												"content": "Version of the API",
												"type": "text/plain"
											}
										},
										{
											"key": "rootFileName",
											"value": "mainFile.wsdl",
											"description": {
												"content": "Name of the main file in the zip. Required only when the input file is zip format",
												"type": "text/plain"
											}
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/apis",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "This status code shows when the user missed the mandatory fields like type, file/url/apiDefinition in the request or provide a invalid request body",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"value": "petstore.json",
											"description": {
												"content": "Input swagger / raml / wsdl file to be imported",
												"type": "text/plain"
											}
										},
										{
											"key": "apiName",
											"value": "Swagger Petstore",
											"description": {
												"content": "Name of the API",
												"type": "text/plain"
											}
										},
										{
											"key": "type",
											"value": "swagger",
											"description": {
												"content": "Input file type (This can only be one of swagger,raml,wsdl,openapi)",
												"type": "text/plain"
											}
										},
										{
											"key": "apiDescription",
											"value": "This is a sample server Petstore server",
											"description": {
												"content": "Description of the API",
												"type": "text/plain"
											}
										},
										{
											"key": "apiVersion",
											"value": "V1",
											"description": {
												"content": "Version of the API",
												"type": "text/plain"
											}
										},
										{
											"key": "rootFileName",
											"value": "mainFile.wsdl",
											"description": {
												"content": "Name of the main file in the zip. Required only when the input file is zip format",
												"type": "text/plain"
											}
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/apis",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns the created API object",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"value": "petstore.json",
											"description": {
												"content": "Input swagger / raml / wsdl file to be imported",
												"type": "text/plain"
											}
										},
										{
											"key": "apiName",
											"value": "Swagger Petstore",
											"description": {
												"content": "Name of the API",
												"type": "text/plain"
											}
										},
										{
											"key": "type",
											"value": "swagger",
											"description": {
												"content": "Input file type (This can only be one of swagger,raml,wsdl,openapi)",
												"type": "text/plain"
											}
										},
										{
											"key": "apiDescription",
											"value": "This is a sample server Petstore server",
											"description": {
												"content": "Description of the API",
												"type": "text/plain"
											}
										},
										{
											"key": "apiVersion",
											"value": "V1",
											"description": {
												"content": "Version of the API",
												"type": "text/plain"
											}
										},
										{
											"key": "rootFileName",
											"value": "mainFile.wsdl",
											"description": {
												"content": "Name of the main file in the zip. Required only when the input file is zip format",
												"type": "text/plain"
											}
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/apis",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"{\\r\\n    \\\"apiResponse\\\": {\\r\\n        \\\"api\\\": {\\r\\n            \\\"apiDefinition\\\": {\\r\\n                \\\"type\\\": \\\"rest\\\",\\r\\n                \\\"info\\\": {\\r\\n                    \\\"description\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n                    \\\"version\\\": \\\"1.0\\\",\\r\\n                    \\\"title\\\": \\\"ChuckNorrisAPI\\\"\\r\\n                },\\r\\n                \\\"host\\\": \\\"api.chucknorris.io\\\",\\r\\n                \\\"basePath\\\": \\\"/jokes\\\",\\r\\n                \\\"schemes\\\": [\\r\\n                    \\\"https\\\"\\r\\n                ],\\r\\n                \\\"security\\\": [],\\r\\n                \\\"paths\\\": {\\r\\n                    \\\"/random\\\": {\\r\\n                        \\\"get\\\": {\\r\\n                            \\\"summary\\\": \\\"GET\\\",\\r\\n                            \\\"description\\\": \\\"\\\",\\r\\n                            \\\"operationId\\\": \\\"GET\\\",\\r\\n                            \\\"produces\\\": [\\r\\n                                \\\"application/json\\\"\\r\\n                            ],\\r\\n                            \\\"responses\\\": {},\\r\\n                            \\\"enabled\\\": true\\r\\n                        },\\r\\n                        \\\"enabled\\\": true\\r\\n                    }\\r\\n                },\\r\\n                \\\"securityDefinitions\\\": {},\\r\\n                \\\"definitions\\\": {},\\r\\n                \\\"baseUriParameters\\\": [],\\r\\n                \\\"externalDocs\\\": [],\\r\\n                \\\"servers\\\": [\\r\\n                    {\\r\\n                        \\\"url\\\": \\\"https://api.chucknorris.io/jokes\\\"\\r\\n                    }\\r\\n                ],\\r\\n                \\\"components\\\": {\\r\\n                    \\\"schemas\\\": {}\\r\\n                }\\r\\n            },\\r\\n            \\\"nativeEndpoint\\\": [\\r\\n                {\\r\\n                    \\\"passSecurityHeaders\\\": true,\\r\\n                    \\\"uri\\\": \\\"https://api.chucknorris.io/jokes\\\",\\r\\n                    \\\"connectionTimeoutDuration\\\": 0,\\r\\n                    \\\"alias\\\": false\\r\\n                }\\r\\n            ],\\r\\n            \\\"apiName\\\": \\\"ChuckNorris\\\",\\r\\n            \\\"apiVersion\\\": \\\"1.0\\\",\\r\\n            \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n            \\\"maturityState\\\": \\\"Beta\\\",\\r\\n            \\\"isActive\\\": false,\\r\\n            \\\"type\\\": \\\"REST\\\",\\r\\n            \\\"owner\\\": \\\"Administrator\\\",\\r\\n            \\\"policies\\\": [\\r\\n                \\\"08afbfa9-78e1-4c23-bb19-c0012464047e\\\"\\r\\n            ],\\r\\n            \\\"scopes\\\": [],\\r\\n            \\\"publishedPortals\\\": [],\\r\\n            \\\"creationDate\\\": \\\"2018-09-03 11:56:21 GMT\\\",\\r\\n            \\\"systemVersion\\\": 1,\\r\\n            \\\"id\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n        },\\r\\n        \\\"responseStatus\\\": \\\"SUCCESS\\\",\\r\\n        \\\"versions\\\": [\\r\\n            {\\r\\n                \\\"versionNumber\\\": \\\"1.0\\\",\\r\\n                \\\"apiId\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n            }\\r\\n        ],\\r\\n        \\\"teams\\\": [\\r\\n            {\\r\\n                \\\"id\\\": \\\"Administrators\\\",\\r\\n                \\\"name\\\": \\\"Administrators\\\",\\r\\n                \\\"canDelete\\\": \\\"false\\\"\\r\\n            },\\r\\n            {\\r\\n                \\\"id\\\": \\\"Default\\\",\\r\\n                \\\"name\\\": \\\"Default\\\",\\r\\n                \\\"canDelete\\\": \\\"true\\\"\\r\\n            }\\r\\n        ]   }\\r\\n}\""
						}
					]
				},
				{
					"name": "Delete APIs",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/apis?apiIds=2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0,2c843837-cc6c-4ba1-aaf3-b10f8e9adbe7&forceDelete=true",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "apiIds",
									"value": "2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0,2c843837-cc6c-4ba1-aaf3-b10f8e9adbe7",
									"description": "(Required) API Ids for the APIs to be deleted. Multiple API ids combined by comma"
								},
								{
									"key": "forceDelete",
									"value": "true",
									"description": "Flag for force delete. Required when API is associated with some applications"
								}
							]
						},
						"description": "Delete the inactive APIs"
					},
					"response": [
						{
							"name": "This response code returns when the mandatory parameter apiIds is missing in the query parameter",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis?apiIds=<string>&forceDelete=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "apiIds",
											"value": "<string>"
										},
										{
											"key": "forceDelete",
											"value": "true"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis?apiIds=<string>&forceDelete=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "apiIds",
											"value": "<string>"
										},
										{
											"key": "forceDelete",
											"value": "true"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API.",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis?apiIds=<string>&forceDelete=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "apiIds",
											"value": "<string>"
										},
										{
											"key": "forceDelete",
											"value": "true"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns the apiId along with the error when unsuccessful",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/apis?apiIds=<string>&forceDelete=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "apiIds",
											"value": "<string>"
										},
										{
											"key": "forceDelete",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"id\": \"<string>\",\n  \"apiName\": \"<string>\",\n  \"apiVersion\": \"<string>\",\n  \"type\": \"<string>\",\n  \"publishedPortals\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"systemVersion\": \"<integer>\",\n  \"teams\": [\n   {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"source\": \"<string>\"\n   },\n   {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"source\": \"<string>\"\n   }\n  ],\n  \"active\": \"<boolean>\",\n  \"apiId\": \"<string>\",\n  \"errorReason\": \"<string>\",\n  \"responseStatus\": \"<string>\"\n },\n {\n  \"id\": \"<string>\",\n  \"apiName\": \"<string>\",\n  \"apiVersion\": \"<string>\",\n  \"type\": \"<string>\",\n  \"publishedPortals\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"systemVersion\": \"<integer>\",\n  \"teams\": [\n   {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"source\": \"<string>\"\n   },\n   {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"source\": \"<string>\"\n   }\n  ],\n  \"active\": \"<boolean>\",\n  \"apiId\": \"<string>\",\n  \"errorReason\": \"<string>\",\n  \"responseStatus\": \"<string>\"\n }\n]"
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "68328b5e-4249-48e8-a287-f36ed92654c2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c71aec70-5a83-4464-a155-c9565d39ce3d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Service Registry",
			"item": [
				{
					"name": "Unpublish From Service Registry",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"unpublishInfo\": {\n        \"serviceRegistryIds\": [\n            \"EurekaDefault\"\n        ],\n        \"apiId\": \"2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/serviceRegistry/unpublish",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"serviceRegistry",
								"unpublish"
							]
						},
						"description": "Unpublish one or more APIs from one or more service registries.\n\nUnpublish one or more APIs using the below payload.\n\n\n{\n\t\"unpublishInfos\": [\n\t\t{\n\t\t\t\"serviceRegistryIds\": [\n\t\t\t\t\"EurekaDefault\"\n\t\t\t],\n\t\t\t\"apiId\": \"2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0\"\n\t\t},\n\t\t{\n\t\t\t\"serviceRegistryIds\": [\n\t\t\t\t\"EurekaDefault\"\n\t\t\t],\n\t\t\t\"apiId\": \"2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0\"\n\t\t}\n\t]\n}"
					},
					"response": [
						{
							"name": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API.",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"unpublishInfo\": {\n        \"apiId\": \"<string>\",\n        \"serviceRegistryIds\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    },\n    \"unpublishInfos\": [\n        {\n            \"apiId\": \"<string>\",\n            \"serviceRegistryIds\": [\n                \"<string>\",\n                \"<string>\"\n            ]\n        },\n        {\n            \"apiId\": \"<string>\",\n            \"serviceRegistryIds\": [\n                \"<string>\",\n                \"<string>\"\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/serviceRegistry/unpublish",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"serviceRegistry",
										"unpublish"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns the service registry unpublish response",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"unpublishInfo\": {\n        \"apiId\": \"<string>\",\n        \"serviceRegistryIds\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    },\n    \"unpublishInfos\": [\n        {\n            \"apiId\": \"<string>\",\n            \"serviceRegistryIds\": [\n                \"<string>\",\n                \"<string>\"\n            ]\n        },\n        {\n            \"apiId\": \"<string>\",\n            \"serviceRegistryIds\": [\n                \"<string>\",\n                \"<string>\"\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/serviceRegistry/unpublish",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"serviceRegistry",
										"unpublish"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"{\\r\\n  \\\"unpublishResponse\\\": {\\r\\n    \\\"apiId\\\": \\\"afe8b72e-e1a5-47c6-9b43-e7f12858c091\\\",\\r\\n    \\\"apiName\\\": \\\"CalcService\\\",\\r\\n    \\\"apiVersion\\\": \\\"10.3\\\",\\r\\n    \\\"serviceRegistryUnpublishResponses\\\": [\\r\\n      {\\r\\n        \\\"serviceRegistryId\\\": \\\"aec973cd-1e4c-4a93-93a4-950e32d39156\\\",\\r\\n        \\\"serviceRegistryName\\\": \\\"MyServiceConsul\\\",\\r\\n        \\\"success\\\": true,\\r\\n        \\\"description\\\": \\\" Unpublish successful\\\"\\r\\n      }\\r\\n    ]\\r\\n  }\\r\\n}\""
						}
					]
				},
				{
					"name": "Get Service Registry Publish Info",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/serviceRegistry/publish?apiId=2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"serviceRegistry",
								"publish"
							],
							"query": [
								{
									"key": "apiId",
									"value": "2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0",
									"description": "(Required) API Id of the API for which ServiceRegistryPublishInfo is to be fetched"
								}
							]
						},
						"description": "Retrieve the service registry publish information for the API"
					},
					"response": [
						{
							"name": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/serviceRegistry/publish?apiId=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"serviceRegistry",
										"publish"
									],
									"query": [
										{
											"key": "apiId",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "This status code indicates that Publish Info for the apiId specified is not found in API Gateway",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/serviceRegistry/publish?apiId=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"serviceRegistry",
										"publish"
									],
									"query": [
										{
											"key": "apiId",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns the service registry publish info for the API",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/serviceRegistry/publish?apiId=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"serviceRegistry",
										"publish"
									],
									"query": [
										{
											"key": "apiId",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"{\\r\\n  \\\"publishInfo\\\": {\\r\\n    \\\"apiId\\\": \\\"afe8b72e-e1a5-47c6-9b43-e7f12858c091\\\",\\r\\n    \\\"serviceRegistryPublishInfo\\\": [\\r\\n      {\\r\\n        \\\"serviceRegistryId\\\": \\\"aec973cd-1e4c-4a93-93a4-950e32d39156\\\",\\r\\n        \\\"status\\\": \\\"PUBLISHED\\\",\\r\\n        \\\"name\\\": \\\"MyServiceConsul\\\",\\r\\n        \\\"gatewayEndpoints\\\": [\\r\\n          {\\r\\n            \\\"gatewayEndpoint\\\": \\\"http://localhost:5555/ws/calc/1\\\",\\r\\n            \\\"status\\\": \\\"PUBLISHED\\\"\\r\\n          },\\r\\n          {\\r\\n            \\\"gatewayEndpoint\\\": \\\"http://localhost:1111/ws/calc/1\\\",\\r\\n            \\\"status\\\": \\\"NEW\\\"\\r\\n          }\\r\\n        ]\\r\\n      }\\r\\n    ]\\r\\n  }\\r\\n}\""
						}
					]
				},
				{
					"name": "Publish To Service Registry",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"publishInfo\": {\n\t\t\"serviceRegistryPublishInfo\": [\n\t\t\t{\n\t\t\t\t\"gatewayEndpoints\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"gatewayEndpoint\": \"http://SAG-1YVHZY2:5555/gateway/Petstore/1.0.5\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"serviceRegistryId\": \"EurekaDefault\"\n\t\t\t}\n\t\t],\n\t\t\"apiId\": \"2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0\"\n\t}\n}"
						},
						"url": {
							"raw": "{{baseURL}}/serviceRegistry/publish",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"serviceRegistry",
								"publish"
							]
						},
						"description": "Publish one or more APIs to one or more service registries.\n\nPublish more than one APIs with the given payload\n\n{\n\t\"publishInfos\": [\n\t\t{\n\t\t\t\"serviceRegistryPublishInfo\": [\n\t\t\t\t{\n\t\t\t\t\t\"gatewayEndpoints\": [],\n\t\t\t\t\t\"serviceRegistryId\": \"EurekaDefault\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"apiId\": \"d3371bdb-457a-4248-8034-7887ac8b42de\"\n\t\t},\n\t\t{\n\t\t\t\"serviceRegistryPublishInfo\": [\n\t\t\t\t{\n\t\t\t\t\t\"gatewayEndpoints\": [],\n\t\t\t\t\t\"serviceRegistryId\": \"EurekaDefault\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"apiId\": \"2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0\"\n\t\t}\n\t]\n}"
					},
					"response": [
						{
							"name": "Returns the status of the publish operations given in the request.",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"publishInfo\": {\n        \"apiId\": \"<string>\",\n        \"serviceRegistryPublishInfo\": [\n            {\n                \"serviceRegistryId\": \"<string>\",\n                \"status\": \"<string>\",\n                \"name\": \"<string>\",\n                \"gatewayEndpoints\": [\n                    {\n                        \"gatewayEndpoint\": \"<string>\",\n                        \"status\": \"<string>\"\n                    }\n                ]\n            },\n            {\n                \"serviceRegistryId\": \"<string>\",\n                \"status\": \"<string>\",\n                \"name\": \"<string>\",\n                \"gatewayEndpoints\": [\n                    {\n                        \"gatewayEndpoint\": \"<string>\",\n                        \"status\": \"<string>\"\n                    }\n                ]\n            }\n        ],\n        \"integrationServerPublishInfo\": [\n            {\n                \"integrationServerId\": \"<string>\",\n                \"packageName\": \"<string>\",\n                \"folderName\": \"<string>\",\n                \"status\": \"<string>\",\n                \"integrationServerName\": \"<string>\"\n            },\n            {\n                \"integrationServerId\": \"<string>\",\n                \"packageName\": \"<string>\",\n                \"folderName\": \"<string>\",\n                \"status\": \"<string>\",\n                \"integrationServerName\": \"<string>\"\n            }\n        ]\n    },\n    \"publishInfos\": [\n        {\n            \"apiId\": \"<string>\",\n            \"serviceRegistryPublishInfo\": [\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                },\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                }\n            ],\n            \"integrationServerPublishInfo\": [\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                },\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                }\n            ]\n        },\n        {\n            \"apiId\": \"<string>\",\n            \"serviceRegistryPublishInfo\": [\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                },\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                }\n            ],\n            \"integrationServerPublishInfo\": [\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                },\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                }\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/serviceRegistry/publish",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"serviceRegistry",
										"publish"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"{\\r\\n  \\\"publishResponse\\\": {\\r\\n    \\\"apiId\\\": \\\"afe8b72e-e1a5-47c6-9b43-e7f12858c091\\\",\\r\\n    \\\"apiName\\\": \\\"CalcService\\\",\\r\\n    \\\"apiVersion\\\": \\\"10.3\\\",\\r\\n    \\\"serviceRegistryPublishResponses\\\": [\\r\\n      {\\r\\n        \\\"serviceRegistryId\\\": \\\"aec973cd-1e4c-4a93-93a4-950e32d39156\\\",\\r\\n        \\\"serviceRegistryName\\\": \\\"MyServiceConsul\\\",\\r\\n        \\\"status\\\": \\\"PUBLISHED\\\",\\r\\n        \\\"gatewayEndpoints\\\": [\\r\\n          {\\r\\n            \\\"gatewayEndpoint\\\": \\\"http://localhost:5555/ws/calc/1\\\",\\r\\n            \\\"status\\\": \\\"PUBLISHED\\\",\\r\\n          }\\r\\n        ],\\r\\n        \\\"success\\\": true,\\r\\n        \\\"description\\\": \\\"Publish successful\\\"\\r\\n      }\\r\\n    ]\\r\\n  }\\r\\n}\""
						},
						{
							"name": "This status code indicates that API with given apiId is not found in API Gateway",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"publishInfo\": {\n        \"apiId\": \"<string>\",\n        \"serviceRegistryPublishInfo\": [\n            {\n                \"serviceRegistryId\": \"<string>\",\n                \"status\": \"<string>\",\n                \"name\": \"<string>\",\n                \"gatewayEndpoints\": [\n                    {\n                        \"gatewayEndpoint\": \"<string>\",\n                        \"status\": \"<string>\"\n                    }\n                ]\n            },\n            {\n                \"serviceRegistryId\": \"<string>\",\n                \"status\": \"<string>\",\n                \"name\": \"<string>\",\n                \"gatewayEndpoints\": [\n                    {\n                        \"gatewayEndpoint\": \"<string>\",\n                        \"status\": \"<string>\"\n                    }\n                ]\n            }\n        ],\n        \"integrationServerPublishInfo\": [\n            {\n                \"integrationServerId\": \"<string>\",\n                \"packageName\": \"<string>\",\n                \"folderName\": \"<string>\",\n                \"status\": \"<string>\",\n                \"integrationServerName\": \"<string>\"\n            },\n            {\n                \"integrationServerId\": \"<string>\",\n                \"packageName\": \"<string>\",\n                \"folderName\": \"<string>\",\n                \"status\": \"<string>\",\n                \"integrationServerName\": \"<string>\"\n            }\n        ]\n    },\n    \"publishInfos\": [\n        {\n            \"apiId\": \"<string>\",\n            \"serviceRegistryPublishInfo\": [\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                },\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                }\n            ],\n            \"integrationServerPublishInfo\": [\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                },\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                }\n            ]\n        },\n        {\n            \"apiId\": \"<string>\",\n            \"serviceRegistryPublishInfo\": [\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                },\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                }\n            ],\n            \"integrationServerPublishInfo\": [\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                },\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                }\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/serviceRegistry/publish",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"serviceRegistry",
										"publish"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "This status code indicates an invalid request body",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"publishInfo\": {\n        \"apiId\": \"<string>\",\n        \"serviceRegistryPublishInfo\": [\n            {\n                \"serviceRegistryId\": \"<string>\",\n                \"status\": \"<string>\",\n                \"name\": \"<string>\",\n                \"gatewayEndpoints\": [\n                    {\n                        \"gatewayEndpoint\": \"<string>\",\n                        \"status\": \"<string>\"\n                    }\n                ]\n            },\n            {\n                \"serviceRegistryId\": \"<string>\",\n                \"status\": \"<string>\",\n                \"name\": \"<string>\",\n                \"gatewayEndpoints\": [\n                    {\n                        \"gatewayEndpoint\": \"<string>\",\n                        \"status\": \"<string>\"\n                    }\n                ]\n            }\n        ],\n        \"integrationServerPublishInfo\": [\n            {\n                \"integrationServerId\": \"<string>\",\n                \"packageName\": \"<string>\",\n                \"folderName\": \"<string>\",\n                \"status\": \"<string>\",\n                \"integrationServerName\": \"<string>\"\n            },\n            {\n                \"integrationServerId\": \"<string>\",\n                \"packageName\": \"<string>\",\n                \"folderName\": \"<string>\",\n                \"status\": \"<string>\",\n                \"integrationServerName\": \"<string>\"\n            }\n        ]\n    },\n    \"publishInfos\": [\n        {\n            \"apiId\": \"<string>\",\n            \"serviceRegistryPublishInfo\": [\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                },\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                }\n            ],\n            \"integrationServerPublishInfo\": [\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                },\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                }\n            ]\n        },\n        {\n            \"apiId\": \"<string>\",\n            \"serviceRegistryPublishInfo\": [\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                },\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                }\n            ],\n            \"integrationServerPublishInfo\": [\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                },\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                }\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/serviceRegistry/publish",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"serviceRegistry",
										"publish"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API.",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"publishInfo\": {\n        \"apiId\": \"<string>\",\n        \"serviceRegistryPublishInfo\": [\n            {\n                \"serviceRegistryId\": \"<string>\",\n                \"status\": \"<string>\",\n                \"name\": \"<string>\",\n                \"gatewayEndpoints\": [\n                    {\n                        \"gatewayEndpoint\": \"<string>\",\n                        \"status\": \"<string>\"\n                    }\n                ]\n            },\n            {\n                \"serviceRegistryId\": \"<string>\",\n                \"status\": \"<string>\",\n                \"name\": \"<string>\",\n                \"gatewayEndpoints\": [\n                    {\n                        \"gatewayEndpoint\": \"<string>\",\n                        \"status\": \"<string>\"\n                    }\n                ]\n            }\n        ],\n        \"integrationServerPublishInfo\": [\n            {\n                \"integrationServerId\": \"<string>\",\n                \"packageName\": \"<string>\",\n                \"folderName\": \"<string>\",\n                \"status\": \"<string>\",\n                \"integrationServerName\": \"<string>\"\n            },\n            {\n                \"integrationServerId\": \"<string>\",\n                \"packageName\": \"<string>\",\n                \"folderName\": \"<string>\",\n                \"status\": \"<string>\",\n                \"integrationServerName\": \"<string>\"\n            }\n        ]\n    },\n    \"publishInfos\": [\n        {\n            \"apiId\": \"<string>\",\n            \"serviceRegistryPublishInfo\": [\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                },\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                }\n            ],\n            \"integrationServerPublishInfo\": [\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                },\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                }\n            ]\n        },\n        {\n            \"apiId\": \"<string>\",\n            \"serviceRegistryPublishInfo\": [\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                },\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                }\n            ],\n            \"integrationServerPublishInfo\": [\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                },\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                }\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/serviceRegistry/publish",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"serviceRegistry",
										"publish"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "08b030c3-b10b-4858-98e9-5c9e38bc32a8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d8ca7ebe-55af-4b21-b342-63d92cdc077c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Integration Server",
			"item": [
				{
					"name": "Get Integration Server Publish Info",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/integrationServer/publish?apiId=2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"integrationServer",
								"publish"
							],
							"query": [
								{
									"key": "apiId",
									"value": "2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0",
									"description": "(Required) API Id of the API for which IntegrationServerPublishInfo is to be fetched"
								}
							]
						},
						"description": "Retrieve the integration server publish information for the API. Only REST and SOAP APIs are supported."
					},
					"response": [
						{
							"name": "Returns the integration server publish info for the API",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/integrationServer/publish?apiId=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"integrationServer",
										"publish"
									],
									"query": [
										{
											"key": "apiId",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"publishInfo\": {\n  \"apiId\": \"<string>\",\n  \"serviceRegistryPublishInfo\": [\n   {\n    \"serviceRegistryId\": \"<string>\",\n    \"status\": \"<string>\",\n    \"name\": \"<string>\",\n    \"gatewayEndpoints\": [\n     {\n      \"gatewayEndpoint\": \"<string>\",\n      \"status\": \"<string>\"\n     }\n    ]\n   },\n   {\n    \"serviceRegistryId\": \"<string>\",\n    \"status\": \"<string>\",\n    \"name\": \"<string>\",\n    \"gatewayEndpoints\": [\n     {\n      \"gatewayEndpoint\": \"<string>\",\n      \"status\": \"<string>\"\n     }\n    ]\n   }\n  ],\n  \"integrationServerPublishInfo\": [\n   {\n    \"integrationServerId\": \"<string>\",\n    \"packageName\": \"<string>\",\n    \"folderName\": \"<string>\",\n    \"status\": \"<string>\",\n    \"integrationServerName\": \"<string>\"\n   },\n   {\n    \"integrationServerId\": \"<string>\",\n    \"packageName\": \"<string>\",\n    \"folderName\": \"<string>\",\n    \"status\": \"<string>\",\n    \"integrationServerName\": \"<string>\"\n   }\n  ]\n }\n}"
						},
						{
							"name": "This status code indicates that Publish Info for the apiId specified is not found in API Gateway",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/integrationServer/publish?apiId=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"integrationServer",
										"publish"
									],
									"query": [
										{
											"key": "apiId",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Untitled Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/integrationServer/publish?apiId=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"integrationServer",
										"publish"
									],
									"query": [
										{
											"key": "apiId",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Publish To Integration Server",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"publishInfo\": {\n\t\t\"integrationServerPublishInfo\": [\n\t\t\t{\n\t\t\t\t\"packageAndFolders\": [],\n\t\t\t\t\"integrationServerId\": \"0ad4ee2e-956b-49e0-b7a4-a6a2ea45b034\",\n\t\t\t\t\"integrationServerName\": \"gora\",\n\t\t\t\t\"folderName\": \"test\",\n\t\t\t\t\"packageName\": \"test\",\n\t\t\t\t\"updateNativeEndpointsOfAPI\": true,\n\t\t\t\t\"importSwaggerBasedOnTags\": true,\n\t\t\t\t\"contentModelComplianceForWSDL\": \"None\",\n\t\t\t\t\"enableMTOM\": false,\n\t\t\t\t\"enforceWSICompliance\": false,\n\t\t\t\t\"validateSchemaWithXerces\": true\n\t\t\t}\n\t\t],\n\t\t\"apiId\": \"2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0\"\n\t}\n}"
						},
						"url": {
							"raw": "{{baseURL}}/integrationServer/publish",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"integrationServer",
								"publish"
							]
						},
						"description": "Publish one or more APIs to one or more integration servers. Only REST and SOAP APIs are supported.\n\nPublish multiple apis to Integration Server:\n{\n\t\"publishInfos\": [\n\t\t{\n\t\t\t\"integrationServerPublishInfo\": [\n\t\t\t\t{\n\t\t\t\t\t\"packageAndFolders\": [],\n\t\t\t\t\t\"integrationServerId\": \"0ad4ee2e-956b-49e0-b7a4-a6a2ea45b034\",\n\t\t\t\t\t\"integrationServerName\": \"gora\",\n\t\t\t\t\t\"folderName\": \"test\",\n\t\t\t\t\t\"packageName\": \"test\",\n\t\t\t\t\t\"updateNativeEndpointsOfAPI\": true,\n\t\t\t\t\t\"importSwaggerBasedOnTags\": true,\n\t\t\t\t\t\"contentModelComplianceForWSDL\": \"None\",\n\t\t\t\t\t\"enableMTOM\": false,\n\t\t\t\t\t\"enforceWSICompliance\": false,\n\t\t\t\t\t\"validateSchemaWithXerces\": true\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"apiId\": \"2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0\"\n\t\t},\n\t\t{\n\t\t\t\"integrationServerPublishInfo\": [\n\t\t\t\t{\n\t\t\t\t\t\"packageAndFolders\": [],\n\t\t\t\t\t\"integrationServerId\": \"0ad4ee2e-956b-49e0-b7a4-a6a2ea45b034\",\n\t\t\t\t\t\"integrationServerName\": \"gora\",\n\t\t\t\t\t\"folderName\": \"test\",\n\t\t\t\t\t\"packageName\": \"test\",\n\t\t\t\t\t\"updateNativeEndpointsOfAPI\": true,\n\t\t\t\t\t\"importSwaggerBasedOnTags\": true,\n\t\t\t\t\t\"contentModelComplianceForWSDL\": \"None\",\n\t\t\t\t\t\"enableMTOM\": false,\n\t\t\t\t\t\"enforceWSICompliance\": false,\n\t\t\t\t\t\"validateSchemaWithXerces\": true\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"apiId\": \"d3371bdb-457a-4248-8034-7887ac8b42de\"\n\t\t}\n\t]\n}"
					},
					"response": [
						{
							"name": "Returns the status of the publish operations given in the request.",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"publishInfo\": {\n        \"apiId\": \"<string>\",\n        \"serviceRegistryPublishInfo\": [\n            {\n                \"serviceRegistryId\": \"<string>\",\n                \"status\": \"<string>\",\n                \"name\": \"<string>\",\n                \"gatewayEndpoints\": [\n                    {\n                        \"gatewayEndpoint\": \"<string>\",\n                        \"status\": \"<string>\"\n                    }\n                ]\n            },\n            {\n                \"serviceRegistryId\": \"<string>\",\n                \"status\": \"<string>\",\n                \"name\": \"<string>\",\n                \"gatewayEndpoints\": [\n                    {\n                        \"gatewayEndpoint\": \"<string>\",\n                        \"status\": \"<string>\"\n                    }\n                ]\n            }\n        ],\n        \"integrationServerPublishInfo\": [\n            {\n                \"integrationServerId\": \"<string>\",\n                \"packageName\": \"<string>\",\n                \"folderName\": \"<string>\",\n                \"status\": \"<string>\",\n                \"integrationServerName\": \"<string>\"\n            },\n            {\n                \"integrationServerId\": \"<string>\",\n                \"packageName\": \"<string>\",\n                \"folderName\": \"<string>\",\n                \"status\": \"<string>\",\n                \"integrationServerName\": \"<string>\"\n            }\n        ]\n    },\n    \"publishInfos\": [\n        {\n            \"apiId\": \"<string>\",\n            \"serviceRegistryPublishInfo\": [\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                },\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                }\n            ],\n            \"integrationServerPublishInfo\": [\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                },\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                }\n            ]\n        },\n        {\n            \"apiId\": \"<string>\",\n            \"serviceRegistryPublishInfo\": [\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                },\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                }\n            ],\n            \"integrationServerPublishInfo\": [\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                },\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                }\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/integrationServer/publish",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"integrationServer",
										"publish"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"publishResponse\": {\n  \"apiId\": \"<string>\",\n  \"apiName\": \"<string>\",\n  \"apiVersion\": \"<string>\",\n  \"serviceRegistryPublishResponses\": [\n   {\n    \"serviceRegistryId\": \"<string>\",\n    \"serviceRegistryName\": \"<string>\",\n    \"status\": \"<string>\",\n    \"gatewayEndpoints\": [\n     {\n      \"gatewayEndpoint\": \"<string>\",\n      \"status\": \"<string>\"\n     }\n    ],\n    \"success\": \"<boolean>\",\n    \"description\": \"<string>\",\n    \"failureReason\": \"<string>\"\n   },\n   {\n    \"serviceRegistryId\": \"<string>\",\n    \"serviceRegistryName\": \"<string>\",\n    \"status\": \"<string>\",\n    \"gatewayEndpoints\": [\n     {\n      \"gatewayEndpoint\": \"<string>\",\n      \"status\": \"<string>\"\n     }\n    ],\n    \"success\": \"<boolean>\",\n    \"description\": \"<string>\",\n    \"failureReason\": \"<string>\"\n   }\n  ],\n  \"integrationServerPublishResponses\": [\n   {\n    \"integrationServerId\": \"<string>\",\n    \"integrationServerName\": \"<string>\",\n    \"status\": \"<string>\",\n    \"success\": \"<boolean>\",\n    \"description\": \"<string>\",\n    \"failureReason\": \"<string>\"\n   },\n   {\n    \"integrationServerId\": \"<string>\",\n    \"integrationServerName\": \"<string>\",\n    \"status\": \"<string>\",\n    \"success\": \"<boolean>\",\n    \"description\": \"<string>\",\n    \"failureReason\": \"<string>\"\n   }\n  ]\n },\n \"publishResponses\": [\n  {\n   \"apiId\": \"<string>\",\n   \"apiName\": \"<string>\",\n   \"apiVersion\": \"<string>\",\n   \"serviceRegistryPublishResponses\": [\n    {\n     \"serviceRegistryId\": \"<string>\",\n     \"serviceRegistryName\": \"<string>\",\n     \"status\": \"<string>\",\n     \"gatewayEndpoints\": [\n      {\n       \"gatewayEndpoint\": \"<string>\",\n       \"status\": \"<string>\"\n      }\n     ],\n     \"success\": \"<boolean>\",\n     \"description\": \"<string>\",\n     \"failureReason\": \"<string>\"\n    },\n    {\n     \"serviceRegistryId\": \"<string>\",\n     \"serviceRegistryName\": \"<string>\",\n     \"status\": \"<string>\",\n     \"gatewayEndpoints\": [\n      {\n       \"gatewayEndpoint\": \"<string>\",\n       \"status\": \"<string>\"\n      }\n     ],\n     \"success\": \"<boolean>\",\n     \"description\": \"<string>\",\n     \"failureReason\": \"<string>\"\n    }\n   ],\n   \"integrationServerPublishResponses\": [\n    {\n     \"integrationServerId\": \"<string>\",\n     \"integrationServerName\": \"<string>\",\n     \"status\": \"<string>\",\n     \"success\": \"<boolean>\",\n     \"description\": \"<string>\",\n     \"failureReason\": \"<string>\"\n    },\n    {\n     \"integrationServerId\": \"<string>\",\n     \"integrationServerName\": \"<string>\",\n     \"status\": \"<string>\",\n     \"success\": \"<boolean>\",\n     \"description\": \"<string>\",\n     \"failureReason\": \"<string>\"\n    }\n   ]\n  },\n  {\n   \"apiId\": \"<string>\",\n   \"apiName\": \"<string>\",\n   \"apiVersion\": \"<string>\",\n   \"serviceRegistryPublishResponses\": [\n    {\n     \"serviceRegistryId\": \"<string>\",\n     \"serviceRegistryName\": \"<string>\",\n     \"status\": \"<string>\",\n     \"gatewayEndpoints\": [\n      {\n       \"gatewayEndpoint\": \"<string>\",\n       \"status\": \"<string>\"\n      }\n     ],\n     \"success\": \"<boolean>\",\n     \"description\": \"<string>\",\n     \"failureReason\": \"<string>\"\n    },\n    {\n     \"serviceRegistryId\": \"<string>\",\n     \"serviceRegistryName\": \"<string>\",\n     \"status\": \"<string>\",\n     \"gatewayEndpoints\": [\n      {\n       \"gatewayEndpoint\": \"<string>\",\n       \"status\": \"<string>\"\n      }\n     ],\n     \"success\": \"<boolean>\",\n     \"description\": \"<string>\",\n     \"failureReason\": \"<string>\"\n    }\n   ],\n   \"integrationServerPublishResponses\": [\n    {\n     \"integrationServerId\": \"<string>\",\n     \"integrationServerName\": \"<string>\",\n     \"status\": \"<string>\",\n     \"success\": \"<boolean>\",\n     \"description\": \"<string>\",\n     \"failureReason\": \"<string>\"\n    },\n    {\n     \"integrationServerId\": \"<string>\",\n     \"integrationServerName\": \"<string>\",\n     \"status\": \"<string>\",\n     \"success\": \"<boolean>\",\n     \"description\": \"<string>\",\n     \"failureReason\": \"<string>\"\n    }\n   ]\n  }\n ]\n}"
						},
						{
							"name": "This status code indicates that API with given apiId is not found in API Gateway",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"publishInfo\": {\n        \"apiId\": \"<string>\",\n        \"serviceRegistryPublishInfo\": [\n            {\n                \"serviceRegistryId\": \"<string>\",\n                \"status\": \"<string>\",\n                \"name\": \"<string>\",\n                \"gatewayEndpoints\": [\n                    {\n                        \"gatewayEndpoint\": \"<string>\",\n                        \"status\": \"<string>\"\n                    }\n                ]\n            },\n            {\n                \"serviceRegistryId\": \"<string>\",\n                \"status\": \"<string>\",\n                \"name\": \"<string>\",\n                \"gatewayEndpoints\": [\n                    {\n                        \"gatewayEndpoint\": \"<string>\",\n                        \"status\": \"<string>\"\n                    }\n                ]\n            }\n        ],\n        \"integrationServerPublishInfo\": [\n            {\n                \"integrationServerId\": \"<string>\",\n                \"packageName\": \"<string>\",\n                \"folderName\": \"<string>\",\n                \"status\": \"<string>\",\n                \"integrationServerName\": \"<string>\"\n            },\n            {\n                \"integrationServerId\": \"<string>\",\n                \"packageName\": \"<string>\",\n                \"folderName\": \"<string>\",\n                \"status\": \"<string>\",\n                \"integrationServerName\": \"<string>\"\n            }\n        ]\n    },\n    \"publishInfos\": [\n        {\n            \"apiId\": \"<string>\",\n            \"serviceRegistryPublishInfo\": [\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                },\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                }\n            ],\n            \"integrationServerPublishInfo\": [\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                },\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                }\n            ]\n        },\n        {\n            \"apiId\": \"<string>\",\n            \"serviceRegistryPublishInfo\": [\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                },\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                }\n            ],\n            \"integrationServerPublishInfo\": [\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                },\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                }\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/integrationServer/publish",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"integrationServer",
										"publish"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Untitled Response",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"publishInfo\": {\n        \"apiId\": \"<string>\",\n        \"serviceRegistryPublishInfo\": [\n            {\n                \"serviceRegistryId\": \"<string>\",\n                \"status\": \"<string>\",\n                \"name\": \"<string>\",\n                \"gatewayEndpoints\": [\n                    {\n                        \"gatewayEndpoint\": \"<string>\",\n                        \"status\": \"<string>\"\n                    }\n                ]\n            },\n            {\n                \"serviceRegistryId\": \"<string>\",\n                \"status\": \"<string>\",\n                \"name\": \"<string>\",\n                \"gatewayEndpoints\": [\n                    {\n                        \"gatewayEndpoint\": \"<string>\",\n                        \"status\": \"<string>\"\n                    }\n                ]\n            }\n        ],\n        \"integrationServerPublishInfo\": [\n            {\n                \"integrationServerId\": \"<string>\",\n                \"packageName\": \"<string>\",\n                \"folderName\": \"<string>\",\n                \"status\": \"<string>\",\n                \"integrationServerName\": \"<string>\"\n            },\n            {\n                \"integrationServerId\": \"<string>\",\n                \"packageName\": \"<string>\",\n                \"folderName\": \"<string>\",\n                \"status\": \"<string>\",\n                \"integrationServerName\": \"<string>\"\n            }\n        ]\n    },\n    \"publishInfos\": [\n        {\n            \"apiId\": \"<string>\",\n            \"serviceRegistryPublishInfo\": [\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                },\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                }\n            ],\n            \"integrationServerPublishInfo\": [\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                },\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                }\n            ]\n        },\n        {\n            \"apiId\": \"<string>\",\n            \"serviceRegistryPublishInfo\": [\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                },\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                }\n            ],\n            \"integrationServerPublishInfo\": [\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                },\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                }\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/integrationServer/publish",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"integrationServer",
										"publish"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "This status code indicates an invalid request body",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"publishInfo\": {\n        \"apiId\": \"<string>\",\n        \"serviceRegistryPublishInfo\": [\n            {\n                \"serviceRegistryId\": \"<string>\",\n                \"status\": \"<string>\",\n                \"name\": \"<string>\",\n                \"gatewayEndpoints\": [\n                    {\n                        \"gatewayEndpoint\": \"<string>\",\n                        \"status\": \"<string>\"\n                    }\n                ]\n            },\n            {\n                \"serviceRegistryId\": \"<string>\",\n                \"status\": \"<string>\",\n                \"name\": \"<string>\",\n                \"gatewayEndpoints\": [\n                    {\n                        \"gatewayEndpoint\": \"<string>\",\n                        \"status\": \"<string>\"\n                    }\n                ]\n            }\n        ],\n        \"integrationServerPublishInfo\": [\n            {\n                \"integrationServerId\": \"<string>\",\n                \"packageName\": \"<string>\",\n                \"folderName\": \"<string>\",\n                \"status\": \"<string>\",\n                \"integrationServerName\": \"<string>\"\n            },\n            {\n                \"integrationServerId\": \"<string>\",\n                \"packageName\": \"<string>\",\n                \"folderName\": \"<string>\",\n                \"status\": \"<string>\",\n                \"integrationServerName\": \"<string>\"\n            }\n        ]\n    },\n    \"publishInfos\": [\n        {\n            \"apiId\": \"<string>\",\n            \"serviceRegistryPublishInfo\": [\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                },\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                }\n            ],\n            \"integrationServerPublishInfo\": [\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                },\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                }\n            ]\n        },\n        {\n            \"apiId\": \"<string>\",\n            \"serviceRegistryPublishInfo\": [\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                },\n                {\n                    \"serviceRegistryId\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"name\": \"<string>\",\n                    \"gatewayEndpoints\": [\n                        {\n                            \"gatewayEndpoint\": \"<string>\",\n                            \"status\": \"<string>\"\n                        }\n                    ]\n                }\n            ],\n            \"integrationServerPublishInfo\": [\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                },\n                {\n                    \"integrationServerId\": \"<string>\",\n                    \"packageName\": \"<string>\",\n                    \"folderName\": \"<string>\",\n                    \"status\": \"<string>\",\n                    \"integrationServerName\": \"<string>\"\n                }\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/integrationServer/publish",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"integrationServer",
										"publish"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c59419e7-a8e1-4085-bf17-92b05d42baed",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7c9cdf2d-737f-4160-9a3a-f5a5f67feff7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "manage",
				"type": "string"
			},
			{
				"key": "username",
				"value": "Administrator",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e9365a3d-fd8d-488e-adcd-a867725f723a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "c2e9a969-d744-4e17-98cd-716d288b31b1",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "55efcb8f-610f-4894-9dcc-e2751391ac22",
			"key": "baseURL",
			"value": "http://localhost:5555/rest/apigateway",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}