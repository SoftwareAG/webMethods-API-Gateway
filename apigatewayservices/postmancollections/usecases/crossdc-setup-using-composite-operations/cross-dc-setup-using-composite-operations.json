{
	"info": {
		"_postman_id": "5b64a9a3-dab8-4fd9-8ea6-d531bb0fed3a",
		"name": "Cross DC Setup using Composite Operations",
		"description": "The requests in this collection can be executed in the sequence listed and they take care of:\n* Composing the request payload with the configured crossdc_hosts variable\n* Configuring the listener for the local data center and the ring.\n* Activates the ring setup across all data centers with the configured mode.\n\nThis collection assumes that all the data centers use the same HTTP(S) port and GRPC port for communication and have the same username and password.\n\nThe following variables must be set for the request execution to be successful:\n1. **protocol** - Possible values are http or https. The protocol that you wish to use in the request.\n1. **domain** - The hostname of the machine where API Gateway is installed or a load balancer is hosted (if configured for API Gateway). \n1. **port** - The API Gateway Integration Server port (default value 5555) or the load balancer port (default is 80 or 443) depending on the configured value for domain. \n1. **username** - The username for establishing the connection for the request. The user should have \"Manage general administration configurations\" permission.\n1. **password** - The password corresponding to the provided username\n1. **crossdc_port** - A non-standard port (user-defined) number ranging from 1000 - 65535 that will be used to establish the GRPC communication between the data centers.\n1. **crossdc_hosts** - A comma separated list of hostnames (load balancer or API Gateway) representing the data centers that will be participating in the cross DC setup.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Configure Dataspace Listener and Ring",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var remotesJson = [];\r",
							"if (!pm.collectionVariables.get(\"crossdc_hosts\")) {\r",
							"    pm.variables.set(\"remotes_json\", JSON.stringify(remotesJson, null, 2));\r",
							"} else {\r",
							"  var hosts=pm.collectionVariables.get(\"crossdc_hosts\").toString().split(\",\");\r",
							"  if (hosts != null) {\r",
							"    for (var host in hosts) {\r",
							"      var remoteJson = {};\r",
							"      remoteJson.host = hosts[host];\r",
							"      remoteJson.port = pm.collectionVariables.get(\"port\");\r",
							"      remoteJson.syncPort = pm.collectionVariables.get(\"crossdc_port\");\r",
							"      remoteJson.userName = pm.collectionVariables.get(\"username\");\r",
							"      remoteJson.password = pm.collectionVariables.get(\"password\");\r",
							"      remotesJson.push(remoteJson);\r",
							"    }\r",
							"  }\r",
							"}\r",
							"pm.variables.set(\"remotes_json\", JSON.stringify(remotesJson, null, 2));\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"  pm.variables.unset(\"remotes_json\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"local\": {\r\n    \"host\": \"{{domain}}\",\r\n    \"syncPort\": {{crossdc_port}}\r\n  },\r\n  \"remotes\": {{remotes_json}}\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/dataspace/configure",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dataspace",
						"configure"
					]
				}
			},
			"response": []
		},
		{
			"name": "Activate Dataspace Ring",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"  pm.variables.unset(\"remotes_json\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var remotesJson = [];\r",
							"if (!pm.collectionVariables.get(\"crossdc_hosts\")) {\r",
							"    pm.variables.set(\"remotes_json\", JSON.stringify(remotesJson, null, 2));\r",
							"} else {\r",
							"  var hosts=pm.collectionVariables.get(\"crossdc_hosts\").toString().split(\",\");\r",
							"  if (hosts != null) {\r",
							"    for (var host in hosts) {\r",
							"      var remoteJson = {};\r",
							"      remoteJson.host = hosts[host];\r",
							"      remoteJson.port = pm.collectionVariables.get(\"port\");\r",
							"      remoteJson.syncPort = pm.collectionVariables.get(\"crossdc_port\");\r",
							"      remoteJson.userName = pm.collectionVariables.get(\"username\");\r",
							"      remoteJson.password = pm.collectionVariables.get(\"password\");\r",
							"      remotesJson.push(remoteJson);\r",
							"    }\r",
							"  }\r",
							"}\r",
							"pm.variables.set(\"remotes_json\", JSON.stringify(remotesJson, null, 2));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"local\": {\r\n    \"host\": \"{{domain}}\",\r\n    \"syncPort\": {{crossdc_port}}\r\n  },\r\n  \"remotes\": {{remotes_json}}\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/dataspace/activateAll?mode=ACTIVE_RING",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dataspace",
						"activateAll"
					],
					"query": [
						{
							"key": "mode",
							"value": "ACTIVE_RING",
							"description": "Possible values: STANDALONE, STANDBY, ACTIVE_RING"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{username}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"function validateCollectionVariable(varName) {",
					"  if (!pm.collectionVariables.get(varName)) {",
					"    console.log(\"Cannot execute the request because the collection variable \" + varName + \" is not set.\");",
					"    throw new Error(\"Cannot execute the request because the collection variable \" + varName + \" is not set.\");",
					"  }",
					"}",
					"",
					"validateCollectionVariable(\"protocol\");",
					"validateCollectionVariable(\"domain\");",
					"validateCollectionVariable(\"port\");",
					"validateCollectionVariable(\"username\");",
					"validateCollectionVariable(\"password\");",
					"validateCollectionVariable(\"crossdc_port\");",
					"validateCollectionVariable(\"crossdc_hosts\");",
					"validateCollectionVariable(\"crossdc_mode\");",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "protocol",
			"value": ""
		},
		{
			"key": "domain",
			"value": ""
		},
		{
			"key": "port",
			"value": ""
		},
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "crossdc_port",
			"value": ""
		},
		{
			"key": "crossdc_hosts",
			"value": ""
		},
		{
			"key": "crossdc_mode",
			"value": ""
		},
		{
			"key": "endpointSuffix",
			"value": "rest/apigateway"
		},
		{
			"key": "endpoint",
			"value": "{{protocol}}://{{domain}}:{{port}}"
		},
		{
			"key": "baseUrl",
			"value": "{{endpoint}}/{{endpointSuffix}}"
		},
		{
			"key": "dataspace_node_name",
			"value": "Value will be updated at runtime"
		}
	]
}