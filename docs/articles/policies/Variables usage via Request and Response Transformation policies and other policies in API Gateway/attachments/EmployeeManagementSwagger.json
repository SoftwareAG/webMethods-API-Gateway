{
  "swagger": "2.0",
  "info": {
    "description": "API to provide the necessary calls for the Employee management",
    "version": "1.0.0",
    "title": "EmployeeManagementService"
  },
  "host": "localhost:5555",
  "basePath": "/rest/employeemanager",
  "tags": [
    {
      "name": "employee",
      "description": "Everything about your Employee"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/employee": {
      "post": {
        "tags": [
          "employee"
        ],
        "summary": "Create a new employee",
        "description": "",
        "operationId": "createEmployee",
        "consumes": [
          "application/json",
          "application/xml",
          "multipart/form-data"
        ],
        "produces": [
          "multipart/mixed"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Employee"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Employee created successfully"
          },
          "400": {
            "description": "Bad request, please check your input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "employee"
        ],
        "summary": "Get all employees",
        "description": "",
        "operationId": "getAllEmployees",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of all the emplyees",
            "schema": {
              "$ref": "#/definitions/Employee"
            }
          },
          "401": {
            "description": "unauthorized"
          }
        }
      }
    },
    "/employee/{empId}": {
      "get": {
        "tags": [
          "employee"
        ],
        "summary": "Find employee by ID",
        "description": "Returns a single employee",
        "operationId": "getEmployeeById",
        "produces": [
          "multipart/mixed"
        ],
        "parameters": [
          {
            "name": "empId",
            "in": "path",
            "description": "ID of employee to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Employee"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "Employee does not exist"
          }
        }
      },
      "put": {
        "tags": [
          "employee"
        ],
        "summary": "Updates a employee in the store with form data",
        "description": "",
        "operationId": "updateEmployeeWithForm",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "multipart/mixed",
          "application/json"
        ],
        "parameters": [
          {
            "name": "empId",
            "in": "path",
            "description": "ID of employee that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "employee",
            "in": "formData",
            "description": "employee object that needs to be updated",
            "required": true,
            "type": "string"
          },
          {
            "name": "profilePic",
            "in": "formData",
            "description": "profile picture of the employee",
            "required": false,
            "type": "string"
          },
          {
            "name": "profileDoc",
            "in": "formData",
            "description": "profile document of the employee",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Employee updated successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "employee"
        ],
        "summary": "Deletes a employee",
        "description": "",
        "operationId": "deleteEmployee",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "empId",
            "in": "path",
            "description": "Employee id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Employee not found"
          }
        }
      }
    },
    "/employee/{empId}/profilePic": {
      "put": {
        "tags": [
          "employee"
        ],
        "summary": "uploads an image",
        "description": "",
        "operationId": "uploadPicture",
        "consumes": [
          "image/jpeg"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "empId",
            "in": "path",
            "description": "ID of pet to update",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "profilePic",
            "in": "body",
            "description": "profile picture of the employee",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Employee"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "profile picture updated successfully",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "employee"
        ],
        "summary": "get the image of employee",
        "description": "",
        "operationId": "getPicture",
        "produces": [
          "image/jpeg"
        ],
        "parameters": [
          {
            "name": "empId",
            "in": "path",
            "description": "ID of pet to update",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieves the profile picture",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/employee/{empId}/profileDoc": {
      "put": {
        "tags": [
          "employee"
        ],
        "summary": "uploads a document",
        "description": "",
        "operationId": "uploadDocument",
        "consumes": [
          "application/pdf"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "empId",
            "in": "path",
            "description": "ID of pet to update",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "profilePic",
            "in": "body",
            "description": "profile document of the employee",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Employee"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "profile document updated successfully",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "employee"
        ],
        "summary": "get the document of employee",
        "description": "",
        "operationId": "getDocument",
        "produces": [
          "application/pdf"
        ],
        "parameters": [
          {
            "name": "empId",
            "in": "path",
            "description": "ID of pet to update",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieves the profile document",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "petstore_auth": {
      "type": "basic"
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "Employee": {
      "type": "object",
      "required": [
        "empName",
        "designation"
      ],
      "properties": {
        "empId": {
          "type": "integer",
          "format": "int64"
        },
        "empName": {
          "type": "string",
          "example": "Alexander"
        },
        "designation": {
          "type": "string",
          "example": "Enginner"
        },
        "profilePic": {
          "type": "object"
        },
        "profilePicName": {
          "type": "string",
          "example": "myProfilePic.jpeg"
        },
        "profileDoc": {
          "type": "object"
        },
        "profileDocName": {
          "type": "string",
          "example": "myResume.pdf"
        }
      },
      "xml": {
        "name": "Employee"
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}